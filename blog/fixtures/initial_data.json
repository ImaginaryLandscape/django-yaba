[
    {
        "pk": 1, 
        "model": "blog.theme", 
        "fields": {
            "slug": "default", 
            "title": "Default"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.theme", 
        "fields": {
            "slug": "different", 
            "title": "Different"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.configuration", 
        "fields": {
            "theme": 1, 
            "slug": "main-site", 
            "title": "Main Site"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.category", 
        "fields": {
            "slug": "contegix", 
            "label": "Contegix"
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.category", 
        "fields": {
            "slug": "django", 
            "label": "Django"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.category", 
        "fields": {
            "slug": "gene", 
            "label": "General"
        }
    }, 
    {
        "pk": 8, 
        "model": "blog.category", 
        "fields": {
            "slug": "imaginary-landscape", 
            "label": "Imaginary Landscape"
        }
    }, 
    {
        "pk": 7, 
        "model": "blog.category", 
        "fields": {
            "slug": "personal", 
            "label": "Personal"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.category", 
        "fields": {
            "slug": "programming", 
            "label": "Programming"
        }
    }, 
    {
        "pk": 6, 
        "model": "blog.category", 
        "fields": {
            "slug": "python", 
            "label": "Python"
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.category", 
        "fields": {
            "slug": "video-games", 
            "label": "Video Games"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.links", 
        "fields": {
            "slug": "contegix", 
            "site_link": "http://www.contegix.com", 
            "label": "Contegix"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.links", 
        "fields": {
            "slug": "corey-goldberg", 
            "site_link": "http://coreygoldberg.blogspot.com/", 
            "label": "Corey Goldberg"
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.links", 
        "fields": {
            "slug": "hate-your-job", 
            "site_link": "http://www.hateonyourjob.com", 
            "label": "Hate On Your Job"
        }
    }, 
    {
        "pk": 6, 
        "model": "blog.links", 
        "fields": {
            "slug": "imaginary-landscape", 
            "site_link": "http://www.imagescape.com", 
            "label": "Imaginary Landscape"
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.links", 
        "fields": {
            "slug": "ownzu", 
            "site_link": "http://www.ownzu.org/", 
            "label": "Ownzu"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.links", 
        "fields": {
            "slug": "able-few", 
            "site_link": "http://www.theablefew.com", 
            "label": "The Able Few"
        }
    }, 
    {
        "pk": 19, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>I was reading PC Gamer today, their newest issue that should be on news stands now, and stumbled across their article on <a title=\"iRacing\" href=\"http://www.iracing.com\" target=\"_blank\">iRacing</a>. For those not familiar, iRacing is a full blown, hardcore (like, you must own a steering wheel and pedals to play, and some Nascar drivers actually use it to practice) racing simulator. I'm not much of a racing simulation fan, I'm not even much of a racing fan to be honest, but I am fan of credible journalism. So I figured for sure, an article on iRacing would certainly be penned by the great Andy Mahood, simluation guru with his fingers in all things simulated. Shocked was I to find that no, that wasn't the case, instead the article is penned by an author that knows little to nothing about simulation and even says \"I wouldn't know a splitter from a spoiler\". Oh goody! So what you're saying is you don't know jack shit about racing, but PLEASE take my advice on how awesome this racing simulator is, I'm sure you'll enjoy it! Why thanks! As long as I'm being a fucking idiot, I'll go ahead and get some red meat, juicy deliciousness, animal slaughtering, fine dining advice from a fucking vegan. Dense.</p>\r\n<p>Since the newest Editor In Chief, Gary Steinman, came aboard, this magazine has jumped the shark harder than Dallas with their bogus ass \"it was all a dream\" sequence. This guy comes aboard, and suddenly the rich content delivered by their excellent columnist are completely axed without hesitation. No more Killing Box, no more reporting on mod communities, no more RPG goodness from Desslock, no more in depth simulator analysis from Andy Mahood, nope, all of it was nixed. What'd that make more room for you may wonder? Previews, interviews, and 'eye-witness' accounts. We'll come back to that nonsense in a moment though, because I'd like to point out that I did give this new EIC a chance. He's been at the helm for at least 5-6 issues now, and I've watched my favorite magazine take a very steadily decline along these issues. I could see it happening, but I opted to back them. They've modified the magazine numerous times in the past, such as The Vede taking an approach of grouping by genre through the magazine. I've stuck by them through those times, and this time as well, but I'm done with their experiment now.</p>\r\n<p>They haven't nixed the columnists, shrank the reviews, and Hard Stuff sections to make room for more reviews, they've shrank them to make more room for what makes publishers happier. This first started to hit me when they basically scoffed at the notion that Valve was being even the slightest bit Douchey with Left for Dead 2. 5-10 years ago PC Gamer would have been saying 'WTF Mate?', but today? They scoff at how gamers aren't looking at the cool 'value' they get. They spent pages on how fucking awesome L4D2 is going to be, and then make a mockery of the L4D fans that are upset that they're not going to get the smorgasboard of additional content that they were lead to believe would exist (they weren't promised it, but it did really seem like Valve would be carting out content like there was no tomorrow). That seems more than a wee bit harsh. Then this month, they completely defend Blizzard's decision to nix LAN play from Starcraft 2, and even talk about it like it's a good thing. Are you fucking serious?! What happened to defending gamers instead of placating publishers?</p>\r\n<p>Which leads me to the reasoning for the crunched down reviews, the nixed columns, and so on.. It all makes for extra space that can be used for previews, where miraculously every game ever sounds like the next g'damn gaming revolution. I don't even mind it all that much, every single freaking game journalist outfit there is seems to exist solely to amp up hype for games previous to their release. Then a week after the game's out, the publish a review tanking the game after everyone's bought the damn thing. They honestly said that Terminator Salvation looked like it showed promise, and should be a great game. They later gave it a scathing review of course talking about how absolutely terrible it was. The game look like garbage in the review, was up against an intensely tight deadline thanks to it being a movie based game, but yet, they didn't really have anything negative to say in the preview. That's great journalism guys, real good. How many people bought a shitty game because you didn't say what you think? I'm sure the publishers, who are your advertisers, are ecstatic with your moves to make more space for hyping up games Mr. Steinman. Your magazine is now a glorified advert, well done. By the way, that thing your whole team feels like it's missing? It's called credibility. Good luck finding it again.</p>", 
            "status": 3, 
            "created": "2009-09-12 20:57:40", 
            "title": "PC Gamer: Missing Anything?", 
            "modified": "2009-09-12 20:57:40", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                5
            ], 
            "slug": "pc-gamer-missing-anything", 
            "tags": "gaming PC-Gamer shitty-journalists"
        }
    }, 
    {
        "pk": 18, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>I think I've officially decided that <a title=\"Fabric\" href=\"http://www.nongnu.org/fab/\" target=\"_self\">Fabric</a> is my favorite Python module ever. Sure there are probably other modules I use constantly and never really care about (sorry datetime!). However, they don't bring me the sheer joy that Fabric brings to me. When I'm developing my personal applications, namely YaBa (this blog) and <a title=\"HateOnYourJob\" href=\"http://www.hateonyourjob.com\" target=\"_self\">HateOnYourJob</a>, I tend to perform frequent deployments. Unfortunately deployments can be a time consuming process of bundling my application, pushing it to my server, exploding the archive, putting it in place, restarting Apache and Memcached, and then testing my changes. Not only is that all time consuming, but it's also very prone to human error (i.e. me being a jackass). Now, I thought initally, before I learned of the joys of Fabric that is, that a simple BASH script could easily perform my deployments. So I did at one point have some loosely coupled group of BASH scripts for performing deployments, but it just didn't feel flexible enough. Insert Fabric though, and everything is absolutely effortless.</p>\r\n<p>Currently this is roughly how my deployment path works.</p>\r\n<p>1. Write some code in a git branch<br />2. Merge it on into the master branch<br />3. Push<br />4. Run my fabfile</p>\r\n<p>My fabric file currently consists of:</p>\r\n<pre>set(fab_user='f4nt',<br />    fab_hosts=['f4ntasmic.com'],<br />    root='/tmp/',<br />    site='hateonyourjob')<br /><br />def staging():<br />    set(root='/var/www/domains/hateonyourjob.com/new/')<br />    set(settings='staging_settings.py')<br /><br />def production():<br />    set(root = '/var/www/domains/hateonyourjob.com/www/')<br />    set(settings='production_settings.py')<br /><br />def deploy():<br />    local('git archive --format=tar HEAD | gzip &gt; $(site).tar.gz')<br />    sudo('chown -R f4nt.f4nt $(root)')<br />    sudo('rm -rf $(root)$(site).OLDER')<br />    sudo('mv $(root)$(site).OLD $(root)$(site).OLDER')<br />    sudo('mv $(root)$(site) $(root)$(site).OLD')<br />    run('mkdir $(root)$(site) -p')<br />    put('$(site).tar.gz', '$(root)$(site)/$(site).tar.gz')<br />    run('cd $(root)$(site) &amp;&amp; tar zxf $(site).tar.gz')<br />    sudo('rm -f $(root)$(site)/localsettings.py')<br />    put('$(settings)', '$(root)$(site)/localsettings.py')<br />    run('mkdir -p $(root)$(site)/cache')<br />    sudo('chown -R apache:apache $(root)')<br />    local('rm -f $(site).tar.gz')<br />    restart()<br /><br />def restart():<br />    sudo('/etc/init.d/httpd reload')<br />    sudo('/etc/init.d/memcached restart')<br /></pre>\r\n<p>This file is executed by running:</p>\r\n<pre>fab production deploy<br /></pre>\r\n<p>I can also replace 'production' with 'staging' to deploy to my staging instance of HOYJ. Also, along with it deploying to my staging instance, it'll also put my staging settings file in place instead of my production settings file to ensure that I don't have database conflicts. Some people like to timestamp each of their deployments, and have a rotation system in place built around that. Personally, I feel 3 deployments (current, old, and older) is typically plenty. If I need to fall back further than that I have a git repository that I can go mucking around in. Keeping 50 some odd deployments is just a waste of disk space in my opinion, but your feelings might vary.</p>\r\n<p>I think what I enjoy about Fabric is how easy it is to follow and use. I barely know anything about Fabric, and have barely read any documentation, but I can do deployments with one quick command. Within 5 minutes my deployment is done, and it's done right, everytime. That leaves me more time to focus on developing rather than futzing around with deployments where I'm likely going to screw something up since it's boring and I'll rush through it. :) Anyways, hope this points a couple more people towards Fabric that hadn't previously heard of it. Maybe you Capistrano users might even find it useful :)</p>", 
            "status": 3, 
            "created": "2009-08-31 21:45:54", 
            "title": "Covering Deployments with Fabric", 
            "modified": "2009-08-31 21:45:54", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                4, 
                6
            ], 
            "slug": "covering-deployments-fabric", 
            "tags": "python fabric deployments hateonyourjob"
        }
    }, 
    {
        "pk": 17, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>As most people who would care know, Django 1.1 was recently released. There wasn't a whole lot in this release that I was exactly clamoring for, but I always welcome a rash of bug fixes and the occasional new feature. It's certainly nothing to complain about when my favorite web framework reaches a new version, and obtains a bit more stability along the way. When I first read about customizable Administrative Actions I didn't really care. I guess I didn't really see how it'd affect me that much, if at all. Then the other day it hit me in the face like a ton of bricks.</p>\r\n<p>I'm currently working on an online catalog application. It's not quite a store, just a catalog where people can browse items, and then call in an order. Think of it just like your old school print catalogs, just this one's a bit more convenient. I'm not going to get into why it's not going to just be a store, it's just not currently. So anyways, I'm asked to build this catalog, and I'm trucking right along with it. The customer in question however needs to be able to \"feature\" items on a semi-regular basis. Now I don't really know how many they're going to feature, how often, or anything of the sort. Still, I thought, if I had to 'feature' 10 different items, it'd be a real pain to do it manually. Thankfully Django 1.1 brought me a solution just in time with the customizable administrative actions. I was able to write the following function:</p>\r\n<pre>    def feature_item(self, request, queryset):<br />        count = 0<br />        for x in queryset:<br />            x.is_featured = True<br />            count += 1<br /><br />        if count == 1:<br />            message = \"1 product was\"<br />        else:<br />            message = \"%s products were\" % count<br />        self.message_user(request, \"%s successfully featured\" % message)<br />    feature_item.short_description = \"Feature selected items\"<br /><br /></pre>\r\n<p>That was placed in my ProductAdmin class in admin.py, and then all I needed was:</p>\r\n<pre>actions = ['feature_item']<br /><br /></pre>\r\n<p>a bit further down in my ProductAdmin. Now users can view their products, select a few of them, grab \"Feature items\" from a drop down box, and click \"Go\". Presto, bunch of new items featured on their front page. They can also \"unfeature\" a bunch of items in the same fashion. Saves a bunch of time for me with how easy it was to write that, and a bunch of time for the user later on down the road. I definitely recommend <a title=\"reading the documentation\" href=\"http://docs.djangoproject.com/en/dev/ref/contrib/admin/actions/\" target=\"_self\">reading the documentation</a> to get a better understanding of the admin actions as well. It's worth the read.</p>", 
            "status": 3, 
            "created": "2009-08-05 20:17:53", 
            "title": "Django Admin Actions", 
            "modified": "2009-08-05 20:17:53", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                4, 
                8, 
                6
            ], 
            "slug": "django-admin-actions", 
            "tags": "django python imaginary-landscape"
        }
    }, 
    {
        "pk": 16, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Time for a randomly hodge-podged style of a post, since it's been quite some time since my last update. As I alluded to in previous posts I have left my role as a technical engineer at <a title=\"Contegix\" href=\"http://www.contegix.com\" target=\"_self\">Contegix</a> in search of what I hope is my true calling: being a developer. Now, this move wasn't quite so simple, since in the process I've moved from my hometown of St. Louis, over to Chicago. Yeah, yeah I get it, insert your Cubs hate/love or Cardinals hate/love here. I'm now working for a development shop called <a title=\"Imaginary Landscape\" href=\"http://www.imagescape.com\" target=\"_self\">Imaginary Landscape </a>which focuses mainly on Python development. Obviously, I'm quite the Python enthusiast, so it's quite fitting. As a bonus, the company encourages the use of open source tools, and encourages contributing back to the open source community. Obviously, this is something I'm rather passionate about, so it's rather fitting.</p>\r\n<p>I've been here in Chicago for roughly two weeks now though, and so far so good. We've had to go through a few changes to make ourselves comfortable here in the lovely city of Chicago, but most of them are actually upsides. For instance, I haven't driven a car in going on 7 days now. I walk to work every day, and most places that we need to go to on a regular basis are also in walking distance. As a result of everything feeling relatively close, we're now walking roughly 1.5 to 2 miles per day now. It's pretty nice too. If something does happen to be outside of walking distance they have this crazy public transportation thing in Chicago. I know, it sounds crazy, but it's actually pretty impressive, definitely not accustomed to that in St. Louis. I'll never understand how people in St. Louis could live without owning some form of vehicle. However, here in Chicago, unless I need to go grocery shopping or something of that sort, I don't need a car. Also, instead of going once for that big haul of groceries it's just easier here to grab what you need when you need it.It's a rather interesting change of pace, and so far much more enjoyable. I love just walking to work every morning. No traffic, or any annoying people to put up with. It's nice.</p>\r\n<p>The biggest change however has to be the cost of smoking in Chicago. It's approximately $8/pack, or roughly $90/carton. That's compared to the $35/carton price in St. Louis. Obviously, $90/carton is just irresponsible. Hence, we're working on quitting. We're currently on day 4 and hanging in there fairly well thus far. Personally I'm a bit perplexed on the price. I understand that it's about $3 for the smokes, and $5 for the taxes. I'm pretty clear there, which puts the tax rate in the realm of astronomical, but whatever. What I don't get is the point. If the point is to make people quit smoking, alright, point made, and you win. However, if you're counting on that money to pay for roads 3 years from now, it doesn't add up. I mean, if everyone quits smoking, all that vice money goes away, and in this city/state that has to be a TON of money, cuz I see smokers everywhere around here. Wouldn't a more balanced tax be more profitable for the government? Ah well, what do I know, maybe they actually want healthy people instead of profits, but I doubt it. Alls well that ends well, and I'm on my way to being smoke free, so that's a good thing. Even if the tax logic is weird.</p>\r\n<p>Finally, there's plenty of stuff to do here in this city. We have myriad of things to choose from to do with our time off. It's not like St. Louis where it seemed like there was never anything fun to do. Here, there's a bunch of fun stuff to do all over the place. Seems like it'll be awhile before we run out of entertainment here.</p>\r\n<p>All in all, I'm ecstatic we made the move. I'm loving the job, the city, and the improvement to my quality of life that both the job and city have brought me. I'm far less stressed, more active, and have more time to actually enjoy life. It's a win all around.</p>", 
            "status": 3, 
            "created": "2009-07-31 19:30:01", 
            "title": "Ketchup", 
            "modified": "2009-07-31 19:30:01", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                2, 
                7
            ], 
            "slug": "ketchup", 
            "tags": "hodge-podge chicago life"
        }
    }, 
    {
        "pk": 15, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>I've decided to package up a new version of YaBa and arbitrarily call it a new version, donning it a shiny 0.2. It felt like a pretty good stopping point as I cleared all of my TODO sections, and also added the ability for themes, archives, and improved the search capabilities along the way. The major improvement in this version is the blurring of lines between stories, galleries, and articles. All three can show up in search results, archives, tag lists, and category lists. Galleries also show up on the front page as new items as well. Hence navigation of the fringe items becomes a bit easier with this release.&#160;</p><p>Now if you're currently using 0.1 of YaBa (which I don't think anyone is currently), upgrading can be a bit tricky. I'd recommend starting up 0.2 with a new database, and dumping your 0.1 database straight into the new one. Then you should be ready to roll with all the new features and such. You might be able to get away with just putting the 0.2 files in place, running syncdb, and going on about your merry little way but I wouldn't bank on it. If you do have any issues, please email me though. I'd be glad to help out in getting you upgraded to the newest version. Anyways, without further ado: <a href=\"http://www.f4ntasmic.com/downloads/django-yaba-0.2.tgz\">Download version 0.2 of django-yaba</a>!</p><p>For more information on YaBa, please see the <a href=\"http://www.f4ntasmic.com/article/django-yaba-project/\">project page</a>.</p>", 
            "status": 3, 
            "created": "2009-07-05 10:01:41", 
            "title": "Yaba Version 0.2", 
            "modified": "2009-07-05 10:01:41", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "yaba-version-02", 
            "tags": "django_yaba django python release"
        }
    }, 
    {
        "pk": 14, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>While working on <a href=\"http://www.f4ntasmic.com/article/django-yaba-project/\">YaBa</a>, I found that I really needed a method to take items from multiple models, and paginate them as one major entity. In the case of YaBa I have galleries, articles, and the most common model of story/blog posts. Now, sure, there are likely a few different ways I could have gone about this. The easiest would have been to create a more general model, and used that for everything, however I wanted them to be separate. I wanted distinct articles and galleries that stood as their own entities when necessary, and didn't get clutterred up in the main feed. I need articles to be able to be buttonized on the main navigation bar, and I wanted galleries to be easily sortable in their own story list. All that being said, at times I needed them all to be very similar in structure, and to be able to be listed together in searches, archives, and the main page feed. </p><p>The three main protagonists in this story thus had to be built with similar traits in mind. They all had to be taggable, have slugs, tie to categories, and be searchable without offending the others. This obviously was pretty straight forward, not a big deal. Honestly, would have been a great place to leverage some inheritance really, but hindsight's 20/20 and apparently my foresight wasn't. Not a big deal, wouldn't have saved me all that many lines of code anyways. Besides, the problematic part was more in making these three different models merge into one entity, and still be usable in pagination scenarios (that ruled our itertools, which works great if you don't need pagination). I was very lucky to stumble upon the <a href=\"http://www.djangosnippets.org/snippets/1103/\">MultiQuerySet Snippet</a> at <a href=\"http://www.djangosnippets.org/\">Django Snippets</a>. This incredibly helpful little snippet allowed me to chain multiple querysets into one larger queryset. Now I had the ability to merge my 3 querysets chock full of data into 1 master queryset to render to my templates in a paginated format. There was still one minor problem, MultiQuerySet doesn't do anything to help with the aspect of sorting.</p><p>By default, when using the MultiQuerySet snippet mentioned previously, all the items are sequentially thrown into the list, making your front page kind of strange. Visitors aren't very likely to want to push through ALL of your stories, and then ALL of your articles, just to see the newest gallery. If they are willing to do that, you have the best visitors ever, or you're running a self-help website for insomniacs with too much time on their hands. I had to find a crafty way to sort out the querysets into something more usable. Below is what I came up with:</p><pre>def story_list(request):<br />    stories = Story.objects.all().order_by('-created')                                                                                      <br />    galleries = Gallery.objects.all().order_by('-created')                                                                                  <br />    temp = MultiQuerySet(stories, galleries)                                                                                                <br />    front_page = []                                                                                                                         <br />    for x in temp:                                                                                                                          <br />        front_page.append(x)                                                                                                                <br />                                                                                                                                            <br />    front_page.sort(key=sort_by_date, reverse=1)                                                                                            <br />    paginator = Paginator(front_page, 5)                                                                                                    <br />    page = int(request.GET.get('page', '1'))                                                                                                <br />    posts = paginator.page(page)  </pre><p>Currently on the front page, I don't list articles, but I do list both galleries and your more general blog posts. So, walking through this, let's start from the top. We grab all the stories and galleries, sorting them in the newest first, oldest at the back style. Then I create a MultiQuerySet objects in a temp variable that contains my two querysets. In return I get a nice queryset that I really can't do much with sorting wise, since it's not a \"real\" queryset, but it sort of is. The best way I found to handle the sorting action was to toss all the items into a list, and then use the built in Python list sorting functionality to sort it all out. As you can see I'm using a key function in the sort method of 'front_page'. That function's incredibly simple:</p><pre>def sort_by_date(x):<br />    return x.created</pre><p>We're sorting by each item's created date asset that is in the list. After that we have a nicely sorted queryset like object, that for all intents and purposes at this point does exactly what we need it to do. We pass it off to the Paginator, let it do it's thing, and then I render it off to the template for the story_list function. Now I know, it doesn't look incredibly complex, and it actually is pretty easy. However, I hadn't really found anyone else mentioning a method of doing this, so I figured I'd share with the world how I went about it. I'm actually really interested in how anyone/everyone else is tackling a similar problem though, since I don't declare my method to be the best. It's just a means to an end I suppose. :)</p>", 
            "status": 3, 
            "created": "2009-07-04 20:48:29", 
            "title": "Multiple Models, One Paginator", 
            "modified": "2009-07-04 20:48:29", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "multiple-models-one-paginator", 
            "tags": "python django querysets merging"
        }
    }, 
    {
        "pk": 13, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Those close to me are already aware of what I'm about to post, so this mainly goes out to my friends and family that haven't quite yet caught the news. I'll soon be leaving the city of St. Louis, and thus the state of Missouri in search of bigger, and better things. I don't think this really comes as any major surprise to those that follow me closely though. I've been putting in more time development wise on personal projects, and trying my best to sharpen my development chops. Other kids dreamed of growing up to be fireman, baseball players, movie stars, and so on, but as a kid none of that seemed to really fit me. As time went on, I realized I wanted to someday be a developer, and I'm now seizing that opportunity. It's been years of hard work trying to finish school while carrying full time jobs, and then post-school, preventing my skills from becoming dull by not immediately jumping into a development field.</p><p>It's all finally paid off for me though, and I've received an opportunity that I simply couldn't pass up. It's unfortunate that St. Louis is sort of a crappy town when it comes to development related jobs though. It would have obviously been a lot easier to stay in my stomping grounds of the STL, and expand my career here in my pseudo-hometown (grew up outside of St. Louis, but nearby). Unfortunately, there aren't a lot of hip and cool companies that want to leverage newer technology like Django, Python, and so on. If I wanted to be a Java or PHP developer, I probably could have pulled that off here, but I was in a unique situation. I wasn't unhappy with my job at Contegix, and didn't really *have* to jump ship. Hence, I was able to cherry pick a new position at a new company as I saw fit. That's why I only applied for dream job style scenarios, and to my surprise it panned out in the end. I guess if you keep your chin up, work hard, do the right thing, that eventually it all pays off in the end.&#160;</p><p>Obviously, I'll be leaving a lot of friends and family behind, and that sucks. It really does. I'm going to end up a significant distance from my parents, my sister, and then of course all my friends at Contegix. Hopefully we'll be able to work something out so I can visit on occasion, and keep in touch in some way. In the end, all of this is a necessary evil of chasing my dreams, and going after what I'm passionate about. It's unfortunate that chasing my goals has collateral damage, but nothing in life is free nor easy. I hope those close to me understand that, and support me in my endeavors. I know it's hard for them too, but we'll figure something out. Oh yeah, I haven't really mentioned *where* I'm going have I? I'll cover that in another post, since I kind of want to touch on other topics first...</p><p>So, Contegix, it's been a fun trip. I've learned so much during my tenure with Contegix, and met a bunch amazing people in the form of co-workers and customers. I met a ton of people at the Atlassian Summit that I worked with on a day to day basis via e-mail, and got to put faces to a lot of names. It was an amazing trip, that I feel sort of guilty for going on now given the current circumstances. That aside though, it really affirmed my desire to dig deep and drive for my personal goals. I've also had the pleasure of working with some pretty stellar co-workers who continue to amaze me day in and day out with their intelligence and determination. I really can't thank Contegix enough for taking me under their wing, and letting me grow into a pretty good sys-admin. They've done nothing but foster my creativity, and allow me to grow as an individual expanding my toolset exponentially along the way. Sure we've had our differences at times, and it hasn't always been peaches and cream. That's any company, and this company typically handled situations with grace and upstanding character. They're obviously the best Linux based web host money can buy, but they're a damn good employer too. So, thank you to Contegix.</p><p>I'll be posting more in the near future about where I'm going, what I'll be doing, etc etc, but I mainly wanted to get this out for now so the family members that follow me via my blog can be brought up to date. Anyways, <a href=\"mailto:f4nt%20AT%20f4ntasmic%20DOT%20com\">e-mail me</a>, hit me up on <a href=\"http://www.twitter.com/f4nt\">Twitter</a>, or on <a href=\"http://www.facebook.com/xxf4ntxx\">Facebook</a> if you'd like to get my non-Contegix email address for keeping in touch with me down the road.</p>", 
            "status": 3, 
            "created": "2009-06-25 11:16:09", 
            "title": "End of an Era", 
            "modified": "2009-06-25 11:16:09", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                2, 
                7
            ], 
            "slug": "end-era", 
            "tags": "moving dreams goals"
        }
    }, 
    {
        "pk": 12, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>A few nights ago I was outside work, taking a quick smoke break. Smoke breaks are always kind of odd for me, because it's 5-10 minutes of complete idle time that I use to re-cooperate. At the same time though, they can be really boring and awkward. Hence, this particular day I was peering in at the office of our CTO at Contegix. You see, management just moved into some new offices, so blinds aren't up yet, and our CTO's office is like a glass box of sorts. Knowing him, it likely drives him a bit crazy, which may explain why I don't seem to see him in there often. Maybe it's just bad timing though. Anyways, I believe I'm drifting from my overarching point in this rambling mess of a story...</p><p>I was standing there peering into that office, and thinking of how nice it'd be to have such an office. I mean, it's not overly large, it's not incredibly fancy, but it's his. It's his desk, chair, monitor, etc. It is a gorgeous desk though, and so large, with soooo much space to work in. When I spin it around though, and look at it from my perspective had I been the one sitting in that chair, at that desk, using that monitor, I'd realize it as such a major accomplishment for me. It seems odd, but something so simple as your own space, your own office, would be like a crowning achievement for me. I'm not sure if you've ever seen the movie Singles though, but sometimes I feel like that girl (sap) with her long list of wants in a man (except, I'm a man, and don't really want a man). By the end of the movie though, she just wants a man who blesses her when she sneezes. I think I'm getting to that point, where like, a cubicle would be a win. Don't get me wrong, Contegix does me really good, and treats me right. I'm not jealous of my CTO's office, I'm jealous of his achievements. I don't want his materialistic possessions (well, okay, maybe a little), I want his success and the respect he commands from those around him. I guess what I'm saying is I want to earn the right to an office or cubicle such as that. I want that achievement in life, that milestone.</p><p>I just can't help but feel at times that I haven't put enough into the game yet. I've accomplished a lot, and I've hit some milestones. However, I still feel like I'm so incredibly far from the mythical places that I want to reach. Hence, whilst I stood there, peering into that office I realized it's time to bear down, and work harder. I have a lot more to accomplish in life, and I'm in my theoretical prime now. If I'm going to start seizing opportunities, I better get started soon before all my chances, hopes, and dreams erode into absolute waste. </p><p>I'm going to start trying harder, applying myself more, and focus more on what's important to me. Pinning down what's important to me is a difficult task though, since I am so multi-faceted at times. There's a large chunk of sys-admin in me to go along with the developer aspect of my abilities. Personally, I think it makes for a nice mix, but at the same time it can be distracting. So many shiny things to play with, so little time I suppose :).Anyways, I hope to produce more blog entries showcasing more of what I'm working on. At times it'll be code, at other times it'll just be random cool open source applications I'm using. I hope to get back to contributing to the open source community more in the future as well. It's been awhile since I've been a good open source citizen,so I'll be getting myself back on track there. Expect cool things though, because I'm more focused and determined than ever.</p>", 
            "status": 3, 
            "created": "2009-06-15 11:59:32", 
            "title": "I Can Has... ", 
            "modified": "2009-06-15 11:59:32", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                2, 
                7
            ], 
            "slug": "i-can-has", 
            "tags": "random-thoughts life general"
        }
    }, 
    {
        "pk": 11, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>After some six hours of banging away at the code today, I finally have django-yaba to a point where I feel comfortable \"releasing\" it. It's always been open source, and open to anyone's inspection, granted. However, I've never said \"hey, go install this blogging application, you just might like it\", mainly because I felt it needed more time in the oven. Now it's to a point where it's stable, runs fairly lean, and has all the core features I feel a blogging application should have in order to be deemed ready for public consumption. The main features that I've been able to get in place over the past week includes the Gallery functonality, and the install script. There's been an array of bug fixes, template tweaks, and clean up along the way though. </p><p>In regards to the Gallery features, I've put my first gallery up in place just a bit ago. It has some pictures from the trip to the Atlassian Summit in San Francsisco. You can check it out <a href=\"http://www.f4ntasmic.com/gallery/pictures-san-francisco/\">here</a>, and I'll be adding more pictures to it later on as well. For now I just wanted to make sure it actually works. You can also get a gallery listing via <a href=\"http://www.f4ntasmic.com/gallery/list\">this link</a>, which I've conveniently placed a button for on the top navigation bar for easy access. Anyways, a LOT more details on YaBa can be found at it's <a href=\"http://www.f4ntasmic.com/article/django-yaba-project/\">project page</a>, along with the download link for the application as well. If you're looking for a blogging application, and don't want to use WordPress, give it a shot. You just might like it :) Feel free to contact me with any bugs, feature requests, or just random comments. In fact, you can just leave your comments... in the comments section below. It's crafty like that.</p>", 
            "status": 3, 
            "created": "2009-06-13 16:46:11", 
            "title": "First Real YaBa Release", 
            "modified": "2009-06-13 16:46:11", 
            "tweet_this": true, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "first-real-yaba-release", 
            "tags": "django-yaba first-release django python blogging"
        }
    }, 
    {
        "pk": 10, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>I've opted to push my blog application that I'm building to be my main site now. There's still a lot of work to be done, but it's coming along nicely thus far. So far all of the following features exist:</p><ul><li>WYSIWYG editor via wymeditor</li><li>Blog posts as well as \"Pages\" (ala pages in Wordpress)</li><li>Optional tweeting of new stories</li><li>Link stories/articles to multiple categories</li><li>Easy installation by adjusting only a select few variables</li><li>GitHub feed viewer</li><li>Twitter feed</li><li>Blog Roll</li><li>Dynamic top Navigation bar (Articles can be promoted to list on the nav bar)</li></ul><p>I know it's nothing that nobody's done before, and that's alright. I'm still pretty excited about it. I'm working on making more things optional currently. For instance, the application just assumes everyone in the world has a Twitter account. Obviously, that's not always the case. I have already set it up so that the GitHub feed is completely optional though, and more options will arise in the future. Still a lot of random cleanup, and a few minor bugs to squash along the way. Then comes the documentation, and the installer. All in good time though. It's a marathon, not a sprint, or something thoughtful like that.</p><p>The final hurdle to overcome is upgrading from my current hosting situation. The app performs much better than this site lets on at time, and there's a bunch that can be done to improve performance. However, my current host restraints doesn't give me a lot of flexibility to leverage my other options. I hope to remedy that in the future though. Anyways, poke around, and please, please, please <a href=\"mailto:f4nt@f4ntamsic.com\">E-Mail</a> me if you see issues. There are bound to be dead links abound since I restructured my urls a bit. Lastly, if you want to play with the code, it can found at <a href=\"http://github.com/f4nt/django-yaba/tree/master\">GitHub</a>!</p>", 
            "status": 3, 
            "created": "2009-05-24 23:00:25", 
            "title": "Django Yaba", 
            "modified": "2009-05-24 23:00:25", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "django-yaba", 
            "tags": "python django-yaba django"
        }
    }, 
    {
        "pk": 9, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Wow, I've been on this marathon stint at work to help cover some vacations and the like, but it's nearly over! After today I have myself a 4 day weekend that I'll be over-enjoying in all likelihood. I'm having myself a little birthday party on Saturday (yes, I will be drunk), but other than that the weekend's just how I like it, wiiiiide open. There's a laundry list of things I'd like to do, and I won't get them all done, but hopefully I get cracking on at least a few of them. So far, here's what I have lined up:</p><p>My main project at the moment is working on <a href=\"http://github.com/f4nt/django-yaba/tree/master\">django_yaba</a>. It's an incredibly unoriginal name (django-YetAnotherBlogApplication), and an incredibly unoriginal idea. However, I still haven't found a blog engine built with Django that matches most of the functionality that I had, and loved, with Wordpress. I don't really want to go back to the bloatware that is Wordpress, nor do I want to deal with all of it's security issues. However, finding something that suits all my needs was problematic, so I've opted to write my own. In traditional fashion, it'll be open source, extensible, and very easy to install. You can get more details at the link previously provided, but in a nutshell:</p><ul><li> Easy to Install - BASH script will be included to handle the installation. CAKE! Easier than the famed \"5 minute Wordpress Install\". Sure, it only takes 5 minutes, but you have to do it. Mine you won't. (mostly)\r\n</li><li> WYSIWYG editor\r\n</li><li> Blog roll\r\n</li><li> Pages (different than posts)\r\n</li><li> Comments\r\n</li><li> Twitter and Github support\r\n</li><li> Automagic social media linking\r\n</li></ul><p>Now I know that's mainly just a list of Wordpress features, and honestly, if you want to complain about that you hadn't read my previous paragraph. I know it's not original, but, it's mine, k? I am looking for a new name for the project though, so if you have any thoughts, I'm all ears. Until then, \"django_yaba\" sticks. Oh, you can check out the work in progress at New f4ntasmic studios (UPDATE: You're looking at YaBa now). I just updated it to the latest GitHub commit today. Still a lot of work to be done...</p><p>Another project I have waiting in the wings is to leverage my code from <a href=\"/article//confluence-remote-manager/\">Confluence Remote Manager</a> to make a sister project for JIRA. The remote APIs are fairly similar, and I can quickly wrap the JIRA API in Python as well. I recently started playing with it's API for a project <a href=\"http://www.contegix.com\">Contegix</a> is preparing for the upcoming Atlassian Summit (see sidebar). In a twist, I'll probably not mess with the GTK/GUI aspect of things. I'm actually thinking about playing with curses, and making it all command line based. It's for sysadmin stuff, not for Bob the Developer to edit his JIRA issues anyways. Besides, that GTK app was a lot of work, with very little return. If there was a clamoring for the application, maybe I'd go the extra mile, but only maybe.</p><p>Lastly, I'm thinking about wrapping <a href=\"http://www.pylot.org\">Pylot</a> in a webapp, so you can do load tests from a remote location. For instance, you could set it up on a server you have in-house, go through a simple form, and fire off a load test against one of your servers. Then you could view the results right there in your browser, and not have to worry about installing any pesky dependencies on your local box. I might need to look around to make sure nobody has beaten me to the punch though. If someone already has an open source project of that ilk running, I might just contribute to that instead.</p><p>Anyways, also working on brushing up my design skills as well. Hence, you might see random site design changes here. Sorry, but, this is my home, and I will redecorate it as I see fit. Time to get ready for work though, and end this marathon.</p>", 
            "status": 3, 
            "created": "2009-05-21 15:12:08", 
            "title": "Current Projects", 
            "modified": "2009-05-24 15:12:08", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                7, 
                1, 
                6
            ], 
            "slug": "current-projects", 
            "tags": ""
        }
    }, 
    {
        "pk": 8, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Those around me and following me on twitter are likely already have heard me rambling on and on about my new site, <a href=\"http://www.hateonyourjob.com\">Hate On Your Job</a>. For those of you that haven't, I'll explain the premise, as if it's not blatantly apparent. The idea cam from being frustrated at work one night, and generally, I vent my frustrations out on Twitter. However, I quickly recalled all of those stories you hear about people getting fired for saying something absolutely stupid on Twitter. Wanting to keep my job that night, I opted to just not tweet my frustrations on that particular topic. After all, it was a fleeting moment not really worth the words, and customers of Contegix, along with co-workers (And my boss), follow me on Twitter. It wouldn't have been very intelligent to make such a stupid tweet. Then I thought about how nice it would be if there was a place to make the same tweet, but without the consequences. Thus yet another site was born.</p><p>To keep things \"tweet-like\" I forced a character limit of 200, because 140 didn't seem like enough to really say what you had to say. I had to be able to link the hates to something, so we obviously have the companies that our hateful entries belong to. Finally, each company belongs in a category, allowing for somewhat easier browsing. A full listing of companies is probably still going to be necessary at some point, which is something I'm looking into. Obviously, implementing it isn't difficult at all, thanks to our wonderful friend Django. I guess I'm more or less looking for a graceful way to present all the companies in one giant (paginated) list that doesn't look ridiculous. Between the recent company list, the search feature, and the categories, finding companies isn't too problematic though.</p><p>I do owe some major props to a few people. First and foremost, Mike Bishop of <a href=\"http://www.theablefew.com/\">The Able Few</a> for the amazing design he whipped up for the site. It loads with the quickness, it's easy to read, and just looks fantastic. Definitely better than the original design that I haphazardly slapped together :). I also leveraged a few Django add ons as well that saved me ample amounts of time. I knew I was going to need some form of CAPTCHA to prevent bots from owning my site, so I checked the glorious Interwebs to see what I could find. I figured it wouldn't be too hard to leverage PIL to come up with something on my own, but what's the point if someone's done it already, right? I opted for <a href=\"http://code.google.com/p/django-simple-captcha/\">Django Simple Captcha</a>. It had decent enough of documentation, appeared bug free in my testing, and has been pretty solid thus far. I had to make a few manual edits to the app itself in order for it to work fine in Python 2.4, and to extend the string length. Basically, time spent messing with captcha was reduced to about 25-30 minutes. No complaints here!</p><p>Then I decided I'd like to have some form of voting system, but at the same time I didn't want user accounts. After all, this is anonymous, so user accounts are the wrong way to go. Since I didn't have a session, that made voting incredibly exploitable. At first, I thought \"Maybe the honor system will work\", and just had the most basic vote system in place. Basically, you could sit there and vote all day if you wanted to, over and over and over again. I didn't think it'd be a problem, until a friend of mine thought it'd be funny to setup a curl in an infinite loop, and watched the votes sky rocket. Obviously, the honor system is flawed, and I knew it would be. Call it wishful thinking I suppose. Hence, I dug around a bit to see what my options were. I didn't want to tie votes to IP addresses, since that's going to have a problem for people behind NATs. I didn't want to create a situation where a whole office gets to vote all of once, didn't seem fair. That's when I found <a href=\"http://github.com/sunlightlabs/django-secretballot/tree/master\">Django Secret Ballot</a>. It creates a hash based off of the user's user agent, and injects that to the cookie. All votes by that user are then tied to that. So far that's been working quite while, and has been curl proof thus far. </p><p>Lastly, I also leverage the python-twitter package as well in order to push new hate entries off to Twitter. Why create an RSS Feed system when Twitter can basically serve as an RSS feed for me? Besides, I think people use Twitter more than RSS feeds nowadays. If you're interested, follow <a href=\"http://www.twitter.com/hateonyourjob\">@hateonyourjob</a>. It was kinda fun putting that in place though, since Twitter was down during my testing. Of course the very last thing I checked was for Twitter being functional and instead hacked my code to pieces four or five times first. Way to go me, eh?</p><p>Anyways, I really just wanted to document the \"making of\" the new site. Hope you enjoyed it, and hope you enjoy the new site.</p>", 
            "status": 3, 
            "created": "2009-04-26 15:10:15", 
            "title": "Hate On Your Job", 
            "modified": "2009-05-24 15:10:15", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                7, 
                1, 
                6
            ], 
            "slug": "hate-your-job", 
            "tags": ""
        }
    }, 
    {
        "pk": 7, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>I think it's the western front, but I really can't remember the quote/name of the movie or wherever that line came from exactly. Does remind me though... How do you determine what the western or eastern front is in a fully global war? Is a war with Japan the eastern front until they encroach enough to officially be on the western side of a flat map? Wait, I think I had things I actually wanted to talk about, and this whole front thing is just a distraction. Which reminds me, I've been using the term 'red herring' a lot lately (and correctly I might add). Wonder what that's all about. Shit, I'm doing it again...</p><p>So yeah, a lot of things going on lately. New people at work, new customers, but not really anything Earth shattering in regards to new tech, or crazy fun stuff to play with really. I think 1st and 3rd shifts get all the fun tickets because it seems like I mainly get the \"Oh crap\" tickets. Not that I don't like those, or that they aren't valid tickets, because they are. I just don't get too many \"fun\" curve balls anymore. I still get curve balls, but not of the fun variety lately. Then again, April's always a bad month for me. My birthday's in May, and I always try to have something cool planned for that. Then on top of that it seems like cool things occur in May. For instance, I should be going to San Francisco for that Atlassian Summit. We might also have our new offices finished in May as well. I suppose the excitement of May just makes April a chore to push through.</p><p>In regards to the Atlassian Summit though I'm pretty excited. I'll be giving a presentation there about an internal project I participated in to automate documentation of servers. At least, that's the game plan. The presentation's supposed to be like 20 minutes long though, and honestly, I'm not sure if I've done anything interesting enough in my life to talk about for 20 full minutes. I'm going try to make it happen though, because the project is pretty sweet. Magically having documentation for some 500 servers without lifting a finger is sweet. It's helped billing, sales, and support in the end, so it's been a well received project thus far. Anyways, I don't have a segue (btw, whoever decided that's how that word should be spelt, I hope your dead, and the death was painful) to my next topic really... so I guess, we'll just jump to the next topic or something. Alright, let's go.</p><p>I've been working on another site built with Django lately. It's not quite finished, and still needs a bit more work before I share it with the world though. All I can say thus far is that it's my answer to the problem of people getting fired via Twitter. I'm fairly excited about it mainly due to the fact that I learned significantly more about Django with this application than I did with my blog. My blog here is nice, but I cheated in some aspects to get it up and running the way I wanted. Going in now to add new features and such is a bit more painful due to some silly moves I made in hammering this out. Most of my silliness has been in the templates at least, so I haven't made a mockery of proper database design or anything crazy. The next aspect of the new site I want to work on is leveraging caching with memcached. It won't really be necessary for this site (I can only dream it'd be busy enough to warrant it), but it's something I'll need to learn someday.</p><p>Anyways, that pretty much sums it up for this post. Nothing too interesting or fancy I guess. I do plan on dropping some more Python tutorials at some point, but I'm still working on them. I'd kinda like to open source and explain the Deployment Django app that I previously blogged about, but I think licenses firmly remove that option. Not sure... Besides, I'd have to finish the application in order to do that anyways, and I haven't found hardly anytime at work to actually dig into it. Ah well, another scrapped project frollicks in the dust :)</p>", 
            "status": 3, 
            "created": "2009-04-11 15:09:01", 
            "title": "All Quiet On Some Front", 
            "modified": "2009-05-24 15:09:01", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                2, 
                7
            ], 
            "slug": "all-quiet-some-front", 
            "tags": ""
        }
    }, 
    {
        "pk": 6, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>At Contegix (where I work for those that haven't been following along) I often have to deploy  versions of Atlassian Applications, primarily JIRA and Confluence. I have scripts that handle the vast majority of the deployment written in BASH. These scripts allow me to deploy a new application in under 3 minutes while sticking to all our standards. It creates a new Tomcat container, places the service in daemontools, creates the virtual hosts, and so on and so forth. The end result is an enterprise ready instance of Confluence or JIRA in a mere matter of minutes. </p><p>However, that's not quite 'easy' enough for me. I wanted something even easier that requires even less effort from me. Ideally, complete automation from order to installation is the goal, but we're not quite that far yet. I wanted to reduce the barrier to entry to the scripts I currently use to create a new instance. Formerly what you had to do was the following:\r\n\r\n</p><ol><li> Log into the app server\r\n</li><li> Run the application creation script answering all of the prompts\r\n</li><li> Log into the database server\r\n</li><li> Run the script for the database creation\r\n</li></ol><p>It really wasn't a pain, but it effectively made performing a brand new installation automatically impossible. I was going to have to come up with a new method if I wanted to dramatically reduce the barrier to entry for making new deployments. Granted, our engineers, who are all fully capable of performing these steps, always perform the deployments and that will likely continue to be the case. However, like I said, I was hoping for full automation at some point. </p><p>The problem was finding a method of pulling this off. Asking any non-linux geek to SSH into a server, and run some scripts, sounded like an absolutely terrible idea. I don't know what it is, but the command line still seems to terrify people these days. What doesn't scare people, even though it really should, is using a web browser. So, I've been playing with Django quite a bit lately, and I have a significant love for Python.. I decided to see if it was plausible to put this all together for something a bit easier for the less geeky to be able to pull off these deployments. Here's how I broke it down:\r\n\r\n</p><ol><li> Django with the admin interface to fill out a simple form to create a new instance. Fill out the form, click save, deployment happens during the pre_save signal\r\n</li><li> Save was clicked, and a call goes out to an XMLRPC server (crafted in Python via about 5 lines of code) on the db node\r\n</li><li> Database Server's XMLRPC server runs a simple bash script to craft a database ready for our application\r\n</li><li> Database server was succesful, and a call goes out to an XMLRPC server (crafted in Python via about 5 lines of code) on the app node\r\n</li><li> A couple hundred line BASH script is executed to perform the actual deployment\r\n</li><li> The bash script fires off another python script at the end to update documentation in our personal Confluence instance (Automated documentation ftw!)\r\n</li><li> Email is fired off to support to complete the process of creating a monitor for the site (later to be scripted, and thus automated)\r\n</li><li> We enter post_save, and commit the new instance to the Django database for record keeping. The instance is also set to 'Deployed', so that it doesn't get redeployed on accident later.\r\n</li></ol><p>Obviously there are more moving parts than there is in the manual method. I get that, I really do. On the upside, it's roughly just as fast as doing it by hand if not faster. Also, the human element, assuming no typos in the form, is all but completely removed. All that needs to be done is a simple form is filled out in the administration interface of Django, you click save, and then go check out your new instance a minute or so later. </p><p>The best part was that I found methods to lock it all down pretty well too. The XMLRPC servers will only accept connections from 1 IP address via firewall rules. The XMLRPC instances are also ran as non-privileged users who can essentially do no harm. The reason I chose XMLRPC is that I really, really, really wanted to avoid having to dig into expect. I dig the Python PSSH module, but that method just never seems as stable. A nice offset of the django integration is that I also have a long term record of deployed instances as well. I can display that information via a variety of different means for record keeping later if necessary.</p><p>The whole project isn't quite done yet, and there's a ton of stuff I can do to streamline the application still. However, I've spent roughly 4 hours on the Python sections of the application. The toughest parts being the BASH script, and fighting permissions made up the rest of the time. Hell, the deployment script was probably closer to 8-10 hours of work if not more, but thankfully that was done many moons ago. Anyways, just thought I'd share my triumph. If you have any questions feel free to <a href=\"mailto:f4nt@f4ntasmic.com\">e-mail</a>. I'd be happy to answer any questions you might have!</p>", 
            "status": 3, 
            "created": "2009-05-24 15:06:41", 
            "title": "Django Simplifying Life", 
            "modified": "2009-05-24 15:06:41", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "django-simplifying-life", 
            "tags": ""
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>In between messing with this site, working on a new Django based application, and work I've been toying with Python's XMLRPC abilities on the server side. As a system administrator I'm typically rather lazy, like, really lazy. Well, maybe it's not so much lazy, as I just hate being bothered with the incredibly trivial items in life. For instance, restarting Apache when it goes down, or adding a user, these are trivial things. Granted, they must be done at times, and they're just part of your average sys admins life unfortunately. Still, grabbing a password, logging into an intermediate server, logging in to the end server, then sudoing to the root user, just so I can kick Apache or something equally simple just seems like so much work for so little pay off! </p><p>This basically all came into play when I was working on this site, and would push my local changes to the code via git to my server. Then I would rsync my changes from my git checkout, into the doc root of my site. (Yes I know I could just make my git repo the doc root of my site, but if I go mucking around, and revert a commit, I'd rather it not hose my site, k?) Now I could use a tool like <a href=\"http://www.nongnu.org/fab/index.html\">Fabric</a>, but at the time I wasn't aware of such a tool. I was oblivious apparently! Besides, that and Capistrano just seemed like overkill for what I was doing anyways. Hence, I built myself a little XMLRPC Server, and it was quite simple. The documentation from <a href=\"http://docs.python.org/library/simplexmlrpcserver.html\">Python.org</a> is actually just about perfect for what I was wanting to pull off. First, we just create a simplistic XMLRPC Server:</p><pre><code>\r\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\r\n\r\nfrom SimpleXMLRPCServer import SimpleXMLRPCRequestHandler\r\n\r\nimport subprocess, server_status\r\n\r\nclass RequestHandler(SimpleXMLRPCRequestHandler):\r\n    rpc_paths = ('/RPC2',)\r\n\r\ndef init_functions():\r\n    server.register_instance(server_status.server_status())\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    ''' Create server '''\r\n    server = SimpleXMLRPCServer((\"localhost\", 8000),\r\n                            requestHandler=RequestHandler)\r\n    server.register_introspection_functions()\r\n\r\n    ''' Register our remote functions '''\r\n    init_functions()\r\n\r\n    ''' Run the server's main loop '''\r\n    server.serve_forever()\r\n</code></pre><p>Stepping through line by line here we create a request handler, and register an instance of \"server_status\" which is small module I built (we'll come back to that). I also created the main function, so that you can import this into another project if needed. In there is were we create our simple little server, tell it which port to listen on, and which request handler we should use. Then we register are internal (introspection) functions, such as listing all available methods. Then we call init_functions, which is the function we defined at the top, which registers our custom module. Finally, we tell the server to serve forever (or until it's killed).</p><p>In the server_status module we have the following:</p><pre><code>\r\nimport subprocess\r\n\r\nclass server_status:\r\n    \"\"\" A collection of commands used to check server statuses \"\"\"\r\n\r\n    def general_disk(self):\r\n        \"\"\" Just provides the output of df -h \"\"\"\r\n        process = subprocess.Popen([\"df -h\"], shell=True, stdout=subprocess.PIPE)\r\n        temp = process.stdout.read()\r\n        return temp\r\n\r\n    def detailed_disk(self, path):\r\n        \"\"\" runs du -sh /path/* \"\"\"\r\n        process = subprocess.Popen([\"du -sh %s/*\" % path], shell=True, stdout=subprocess.PIPE)\r\n        temp = process.stdout.read()\r\n        return temp\r\n\r\n    def list_path(self, path, args = \"-l\"):\r\n        \"\"\" runs an ls -args path \"\"\"\r\n        listpath = subprocess.Popen([\"ls %s %s\" % (args,path)], shell=True, stdout=subprocess.PIPE)\r\n        temp = listpath.stdout.read()\r\n        return temp\r\n\r\n    def pgrep(self, grepper):\r\n        \"\"\" Checks for a process running on a server \"\"\"\r\n        process = subprocess.Popen([\"ps -ef | grep -v grep | grep %s\" % grepper], \r\n            shell=True, stdout=subprocess.PIPE)\r\n        temp = process.stdout.read()\r\n        return temp\r\n</code></pre><p>All that we have here are simple subprocess calls to the system to find out information (this is all *nix based if you're curious). This allows me to check for a variety of system stats such as disk usage, and look for running processes. This is wrapped in the server_status class, which we created an instance of, and registered with our simple XMLRPC server. You could create just about any functions you wanted in our server_status class, such as a function to control Apache like so:</p><pre><code>\r\n    def apache(self, command):\r\n        \"\"\" Controls Apache \"\"\"\r\n        process = subprocess.Popen([\"/etc/init.d/apache2 %s\" % command], shell=True, \r\n            stdout=subprocess.PIPE)\r\n        temp = process.stdout.read()\r\n        return temp\r\n</code></pre><p>\r\nYou could also feel free to create a multitude of classes, just as long as you properly register them with your XMLRPC server instance. So we have our server status and xmlrpc modules, and we can now run our server like so:</p><p>python xmlrpcserver.py</p><p>Afterwards it'll start listening on the host and port that you defined earlier. Now we just need to connect from the client. Typically, since I want an interactive shell, I just use 'ipython', but you could certainly write yourself a quick and dirty command line based application (or GUI if you so desire) to perform quick functions for you. Here I'll just be providing the quick and dirty interactive use:</p><pre><code>\r\nIn [1]: import xmlrpclib\r\n\r\nIn [2]: s = xmlrpclib.ServerProxy('http://localhost:8000')\r\n\r\nIn [3]: print s.system.listMethods()\r\n['apache', 'detailed_disk', 'general_disk', 'list_path', 'pgrep', 'system.listMethods', \r\n     'system.methodHelp', 'system.methodSignature', 'top_grab']\r\n\r\nIn [4]: print s.apache(\"status\")\r\n * Apache is running (pid 7576).\r\n</code></pre><p>We import xmlrpclib, we create a server proxy instance connecting to our simple server, and then we're able to start getting some work done! First I list the available methods, so we know what we have at our disposal. You'll see the functions we created in our server_status module, as well as some internal functions that we registered as well. Finally, we run our Apache command with the \"status\" option, and it return the output of that command. What if I wanted to restart the Apache instance?</p><pre><code>\r\nIn [5]: print s.apache(\"restart\")\r\n * Restarting web server apache2\r\n   ...fail!\r\n</code></pre><p>Fail?! Why fail?! Well, it failed because I'm running the XMLRPC server as a lower level user that doesn't have access to restart Apache at will. If the server was running as root, this wouldn't have been an issue. We could adjust our functions to leverage sudo, with some custom sudo options in /etc/sudoers, but that's another tutorial for another day. Hopefully someone found this useful. If nothing else, it's at least somewhere where I can find it from now on :)</p>", 
            "status": 3, 
            "created": "2009-03-08 15:01:02", 
            "title": "Simple XMLRPC Server", 
            "modified": "2009-05-24 15:01:02", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                1, 
                6
            ], 
            "slug": "simple-xmlrpc-server", 
            "tags": ""
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>It's always so hard to actually explain to people what my job really is. My wife jokes a lot that when people ask her what I do for a living, that she really has no idea what to tell them. We wear many hats, so pinning us down to one particular item is always so difficult. Hence, I've felt it'd be moderately interesting to try to define roughly what it is that I am, what I do, and what it means to me to be a Contegix engineer. </p><p>I take a lot of pride in what I do and what I am as a result, yet it's still always so problematic to define my existence at work. Any given day I can be a company's database administrator, a code monkey, a script kiddie, a system administrator, a desktop repair specialist, a hardware junkie, a firewall's assistant, a salesman, a voodoo doctor, a (metaphorically) doctor, and on the rare occasion a gambler. I guess that's what makes it so hard to define my job, since from ticket to ticket I'm constantly changing my uniform, and my style to fit the needs of ever changing situations as they arise in my inbox. Honestly, it's what I tend to enjoy about Contegix, since I don't typically have a mundane day at work. I can pretty much guarantee that each day I'll stumble upon something new, something different, or something exciting. Then there's other days where it seems like the whole world is crashing down, and you know what, those days are sometimes the best days.</p><p>The pressure's genuinely exciting most of the time when tickets are coming from allover, and it seems like it just won't stop. Typically, that's when we band together best as a team and show our best colors. That's when everyone's on the battlefield fighting for the same cause, working together like a well oiled machine. It's ironic, because we're generally such a rowdy, loud, fun loving bunch, but when it's time to get serious our NOC gets almost creepy silent. Everyone buckles down, digs deep, and pours their heart into each and every ticket. Personally, I think that's what makes the job so tough some times though. I can genuinely say that as a whole team, we care almost too a fault at times.</p><p>We take our work home with us, we stay up at night thinking of ways to improve, and spend our weekends on working on methods to better serve our customers. In fairness, it's very altruistic of us, since we tend to generally love what we do. I started our documentation bot because I was having fun writing some Python code, and playing with XMLRPC. I spend a considerable amount of time getting comfortable with that to the point that our documentation bot was plausible. You can bet right now a Contegix engineer is toiling away with some form of virtualization, LDAP replication, or clustering technology right now. We eat, sleep, and breathe geeky junk because we love it. We love what we do for our customers just as much, and being able to help them put out a great product on the web. I'm proud to host the customers we host, and get all giddy when I see them on the front page of <a href=\"http://www.techcrunch.com/\">TechCrunch</a>. I'm excited to know that at least in some small way, I was a part of it.</p><p>At the same time, when we pour so much in, it's what makes the downsides hurt so much more. We've seen a few customers not make the economic cut, and we hate to see that. We suffer a bit with them, and not just the obvious financial suffering because as an engineer I'm gladly detached from that. Instead we look at it, and think of what we could have done better to help them more. Then there's the rare occasions where an engineer just plain makes a mistake. We've all done it on occasion, and it sucks. You try to dot every I, and cross every T, but sometimes you slip up. It's not like other jobs where the damage is localized. Instead you're hurting a company, and their employees. You're also hurting your fellow engineers by creating more work for them in an effort to clean up any subsequent messes. It's a terrible feeling, and thankfully it's an incredibly rare feeling.</p><p>So in the end, how do I define a Contegix Engineer? I don't really, because I think the only way you can sum it up is by saying \"I am a Contegix Engineer\". Right now that might not hold a lot of weight on the global scale, but I'd like to think someday it will. Hopefully when it reaches that point, people will just look at that and say \"Oh yeah, those are the guys at that amazing host, that just make damn sure your site is always in tip-top shape!\". Anyways, `nuff rambling.</p>", 
            "status": 3, 
            "created": "2009-02-27 14:58:32", 
            "title": "Being a Contegix Engineer", 
            "modified": "2009-05-24 14:58:32", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                3, 
                7
            ], 
            "slug": "being-contegix-engineer", 
            "tags": ""
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Thanks to John Weeks, a co-worker and friend from <a href=\"www.contegix.com\">Contegix</a>, my blog is now much nicer looking. There'll be more improvements as life goes on as well. Basically, consider the site under constant construction :) </p><p>I plan on adding a few frills, such as an RSS Reader, a listing of recent tweets, and perhaps comments eventually as well. All depends on what I feel I need as I go along. I have a feeling, hell a hope, that this site will be a never ending project of mine. Should be useful for keeping my programming wits about me, and giving me something more productive to do than playing games and watching TV. Gotta keep them skills sharp right? </p><p>Right...\r\n\r\nSo, the shocking news? I'm going to try to go to the Atlassian Summit and give a presentation on behalf of Contegix. I have to say, I'm absolutely petrified, and just hope that I don't make a total ass of myself. What I have to share is relatively interesting in my opinion though, so hopefully it all goes well. I figure if I'm giving a presentation on something I helped create, and am genuinely excited about, then maybe it won't be so bad. Anyways, I'll drop more details on what I hope to present in the future.</p>", 
            "status": 3, 
            "created": "2009-02-24 14:56:50", 
            "title": "New Theme and Shocking News", 
            "modified": "2009-05-24 14:56:50", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                3, 
                7
            ], 
            "slug": "new-theme-and-shocking-news", 
            "tags": ""
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.story", 
        "fields": {
            "body": "<blockquote>\r\nBeen awhile since I really wrote anything \"meaningful\" or personal. Thought now might be a decent time. Corny title, I know, but I like it, so deal.\r\n</blockquote><p>I've been self reflecting a lot as of late. Not too terribly sure why, but it's felt rather good to be honest. I can't say that most of my life it's really felt all that great to look back and reflect upon myself. I did some stupid crap when I was younger that I wasn't especially proud of, and I wasted a good chunk of my youth in the process. I can practically hear it now though: \"You accomplished so much despite the adversary you faced\". Sure, I was in some tough situations that would suck a lot of people down deeper, down dirtier roads, put most of those bad situations were my own doing. I had Easy Street in front of my face for most of my childhood yet I always seemed to try to take the hardest path I could for no apparent reason. Maybe I was tired of being the 'smart kid', the 'good kid', or the just plain 'average kid'. Ultimately, I decided the forks to turn at, and when to make U-turns back to Easy Street. Twas my own doing.</p><p>Now I find myself cruising down Easy Street again, fighting the good fight so to speak. It's honestly all a bit weird, and I've never really been able to understand why. This road's nice and straight, and seems to carry on for just about forever. It's like cruising at 70MPH down the highway without another car on the road. Nothing but good times with my wife beside me with good music on the radio. Yet I can't help but be mildly tempted by all the exits we pass along the way. I'm on Easy Street, why on Earth would you hop off of a street with such a pleasant name. I've never really been one to take too many risks in life. I generally play the straight and narrow, and it's frustrating at times. Without risk there isn't a reward, and if you never stop the car you never get to soak in the scenery around you. </p><p>I just can't help but think I have some choices to make in life in regards to what I want to do with it. Do I keep cruising down Easy Street? Should I take a detour down one of life's many exits? I believe it's been said before, but I'm not sure by whom.. The twists and turns in the road of life are often our defining moments, where we make the most crucial decisions that either make us or break us. It's how you handle the bumps, the twists, and the turns that define you. At the end of the day, I feel like a Swiss Army Knife that too often only gets used to open cans. </p>", 
            "status": 3, 
            "created": "2009-02-21 14:55:03", 
            "title": "The Road Too Often Travelled", 
            "modified": "2009-05-24 14:55:03", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                7
            ], 
            "slug": "road-too-often-travelled", 
            "tags": ""
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.story", 
        "fields": {
            "body": "<p>Been hacking on Pylot this morning, and my next goal was to squeeze some more stats out of it. Right now I have a little chunk of code that'll display each URL you tested, along with it's individual average response time. It looks something like this:&#160;</p><p><code>URL: http://tomcat5.f4ntasmic.com/login.action </code></p><p><code>Average Time: 0.359911941176 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/display/ds/Week+27+Meeting+Notes?os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 0.61984525 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com//users/viewuserprofile.action?username=USER&amp;os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 0.810940648148 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/admin/systeminfo.action?os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 1.00016561111 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/pages/editpage.action?pageId=32812&amp;os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 1.22022903333 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/display/ds/Home?os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 1.46209852381 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/display/ds/Example+Human+Resources+Page?os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 1.72546295798 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/display/ds/Company+Induction?os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 2.0159292197 </code></p><p><code>\r\nURL: http://tomcat5.f4ntasmic.com/browsepeople.action?startIndex=&amp;os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 2.2772511931 </code></p><p><code>URL: http://tomcat5.f4ntasmic.com/admin/users/showallusers.action?reset=true&amp;os_username=USER&amp;os_password=PASSWORD </code></p><p><code>Average Time: 2.52043262658&nbsp;</code></p><p>Gunna play with sorting it out so that it can display the top and bottom three in terms of response times. Just don't have a lot of time left this morning to work on unfortunately.</p>", 
            "status": 3, 
            "created": "2009-02-21 14:51:38", 
            "title": "Pylot Hacking", 
            "modified": "2009-05-24 14:51:38", 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                1, 
                6
            ], 
            "slug": "pylot-hacking", 
            "tags": ""
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.article", 
        "fields": {
            "body": "<h4>Myself:</h4>\r\n<p>Hey, my name's Mark, but I often go by 'f4nt' in the online world. It's a really long story, so to cut it short, I used to really like a band name 'fantomas'. However, I was like 13 or 14 at the time, and thought l33t speak was freaking awesome. I was also lazy, and thought fantomas was far too long of a name, so I changed it to f4nt. Then after a few years of using it, and working at <a href=\"http://www.planetquake.com\">PlanetQuake</a> where people got to know my name a bit, I was stuck with it.</p>\r\n<p>Anyways, I'm a recent graduate of Westwood College Online, with a bachelors in Game Development and Software Programming. Oddly, you'd think with a degree like that I'd be avidly into game development right now, but on the contrary, I'm more into more 'boring' development lately. The <a href=\"../../../../article/confluence-remote-manager\">Confluence Remote Manager</a> is my latest project that I've been working on for instance. Wiki management via RPC doesn't sound quite as exciting as 3D game development, but oddly, it really is. I think I'd rather be a general programmer that develops small applications to fit small needs, rather than a niche developer for entertainment purposes. Call it philisophical if you will. Besides, I get to share as a 'boring' programmer, where everything in game development is locked up in proprietary code, patents, and NDAs.</p>\r\n<h2>Family:</h2>\r\n<p>I've been happily married to my wife Kristie for approximately 4 years now. I honestly would be ridiculously lost without her. I'd likely not have the job I do today, or the skills I have without her shoving me forward constantly. It's been a crazy trip so far, and I can only hope it goes on forever (or until she kicks it, and I remarry with some 18 year old, and buy myself a red convertible.. mid-life crisis ftw :)). Also we have 2 adorable cats, because kids take longer to potty train.</p>\r\n<h2>Work:</h2>\r\n<p>I recently workd for <a href=\"http://www.contegix.com\">Contegix</a>,who provides manage Linux dedicated hosting. I had the position of 'shift lead' over the other engineers. I was there for over a year and really enjoyed the work I did there. I was able to help customers with complex problems, developer solutions, write programs, create scripts, automate tasks, and play with cool tech all the time.</p>\r\n<p>Now I work for <a title=\"Imaginary Landscape\" href=\"http://www.imagescape.com\" target=\"_self\">Imaginary Landscape</a>, which is a Python based web development company that mainly focuses on Django based applications. I moved from St. Louis up to Chicago in order to take on this job. At the time of this writing I've been with them for about a week, and it's been pretty amazing so far. It's my first real development job, so there's a helluva lot for me to take in still. That and I'm still getting acclimated to the city as well.</p>\r\n<p>For more information, <a href=\"../../../../article/my-resume\">see my resume.</a></p>\r\n<h2>Contact Me:</h2>\r\n<p>I'm available via a myriad of means:</p>\r\n<ul>\r\n<li> Work Email: markr AT imagescape DOT com </li>\r\n<li> Personal Email: f4nt AT f4ntasmic DOT com </li>\r\n<li> <a href=\"../../../../f4nt\">Follow Me on Twitter</a></li>\r\n</ul>", 
            "status": 3, 
            "title": "About", 
            "created": "2009-05-24 13:55:18", 
            "modified": "2009-05-24 13:55:18", 
            "buttoned": true, 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                7
            ], 
            "slug": "about", 
            "tags": ""
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.article", 
        "fields": {
            "body": "Mark Rogers<a href=\"mailto:f4nt@f4ntasmic.com\">f4nt@f4ntasmic.com</a><hr /><h4>Skills</h4><ul><li> Proficient in Linux operating system (Ubuntu, Fedora, RHEL, Debian)\r\n</li><li> Proficient in a variety of scripting languages (Perl, Python, BASH)\r\n</li><li> Comfortable with C based programming languages\r\n</li><li> Knowledgeable in Windows operating systems\r\n</li><li> Exceptional customer service abilities\r\n</li><li> Strong organizational skills\r\n</li><li> Extensive knowledge of a wide variety of Linux and Open Source applications such as:\r\n<ul><li> Apache Web Server\r\n</li><li> J2EE Containers: Resin, Tomcat, and Jetty\r\n</li><li> PHP Applications (Wordpress, Drupal, Joomla, etc.)\r\n</li><li> Source Control: Git and Subversion\r\n</li><li> Python based applications\r\n</li><li> Database Servers: EnterpriseDB, PostgreSQL, MySQL\r\n</li></ul></li></ul><hr /><h4> Accomplishments </h4><ul><li> Developed this site using Django. The code used to build this is available at GitHub openly, and is designed to be used by anyone. Please see my blog post about <a href=\"http://www.f4ntasmic.com/django-yaba/\">Django-YaBa</a>.\r\n</li><li>Developed <a href=\"http://www.hateonyourjob.com\">Hate On Your Job</a> using Django as well. For more information on it please see blog post titled \"<a href=\"http://www.f4ntasmic.com/hate-your-job/\">Hate On Your Job</a>\".</li><li> Contributed code to the <a href=\"http://www.pylot.org\">Pylot Project</a></li><li> Developed a remote Confluence editor named <a href=\"http://www.f4ntasmic.com/confluence-remote-manager/\">Confluence Remote Manager</a> using Python and PyGTK\r\n</li><li> Created a variety of shell scripts to assist me in my day to day system administration life\r\n</li><li> Created a Django based application to perform automated deployments of J2EE Applications. For more information please see <a href=\"http://www.f4ntasmic.com/django-simplifying-life/\">\"Django Simplifying Life\"</a></li></ul><hr /><h4> Education </h4>\r\n\r\nWestwood College\r\nBachelor of Science in Game Software Development\r\n\r\nEducation experience included:\r\n\r\n<ul><li>Advanced Programming\r\n</li><li>Cross-Platform Game Development\r\n</li><li>3D Game Engine Architecture\r\n</li><li>Algortihm Analysis and Design\r\n</li><li>Assembly Language\r\n</li><li>Game Software Testing and Debugging\r\n</li><li>Software Requirements and Design\r\n</li><li>Team Product Development\r\n</li></ul><hr /><h4> Work Experience </h4><strong>Contegix</strong>, St. Louis, Missouri - October 2007 to Current\r\nhttp://www.contegix.com\r\n\r\nTechnical Engineer:\r\n<ul><li> Currently working as a 'Shift Lead'. This includes leading, training, and managing a small group of engineers\r\n\r\n</li><li> Troubleshoot a wide variety of customer server issues such as:\r\n<ul><li> Applications not running properly\r\n</li><li> Dealing with traffic floods (DDoS)\r\n</li><li> Design solutions to help customers scale applications\r\n</li><li> Firewall Rules\r\n</li></ul></li><li>Install and configure applications for customers such as:\r\n\r\n<ul><li> Apache Web Server\r\n</li><li> J2EE Containers: Resin, Tomcat, and Jetty\r\n</li><li> PHP Applications (Wordpress, Drupal, Joomla, etc.)\r\n</li><li> Source Control: Git and Subversion\r\n</li><li> Python based applications\r\n</li><li> Database Servers: EnterpriseDB, PostgreSQL, MySQL\r\n</li><li> Atlassian applications (Confluence, JIRA, Bamboo, Crowd, etc)\r\n</li><li> LDAP Solutions: Fedora DS, OpenLDAP, ApacheDS\r\n</li></ul></li></ul><hr /><strong>Charter Communications</strong>, Fenton, Missouri - August 2007 to October 2007\r\n\r\nhttp://www.charter.net\r\n\r\nTechnician\r\n<ul><li>Perform cable installations in customer's homes.\r\n</li><li>Installs include cable modems, digital TV, DVRS, and telephony\r\n</li><li>Troubleshoot cable issues\r\n</li></ul><hr /><strong>Dish Network</strong>, St. Charles, Missouri  September 2006 - August 2007\r\n\r\nhttp://htttp://www.dishnetwork.com\r\n\r\nTechnician\r\n<ul><li>Install Satellite TV and Internet services in customer's home\r\n</li><li>Worked with customers to determine best service options for them\r\n</li><li>Extensive use of power tools for running cable\r\n</li><li>Trained new technicians\r\n</li><li>Troubleshoot non-working systems\r\n</li></ul>", 
            "status": 3, 
            "title": "My Resume", 
            "created": "2009-05-24 14:19:04", 
            "modified": "2009-05-24 14:19:04", 
            "buttoned": false, 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                7
            ], 
            "slug": "my-resume", 
            "tags": "python django blogging bash sys-admin linux ubuntu"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.article", 
        "fields": {
            "body": "<h4>Current Projects:</h4>\r\n<p><a href=\"../../../../article/django-yaba-project/\">Django-YaBa</a>:</p>\r\n<p>You're currently looking at it. The premise of this blog application is for people to be able to have a decent option for blogging that's not as bloated as Wordpress or MovableType. I've searched and I've searched, but finding a decent, full featured, blog appliction written in Python (with or without Django) that covers the majority of what WP does just doesn't seem to exist. Django-Yaba seeks out to resolve the gaping hole. Will it ever actually fill it completely? Who knows, but I'll have fun in the meantime.</p>\r\n<p>Status: In progress</p>\r\n<hr />\r\n<p>JIRA Remote Manager:</p>\r\n<p>Much like <a href=\"../../../../articles/confluence-remote-manager\">Confluence Remote Manager</a>, this will instead wrap the JIRA Remote API. For those not in the know, JIRA is a bug tracking software application from <a href=\"http://www.atlassian.com\">Atlassian</a>. I don't plan on wrapping this with pyGTK this time around, and instead intend to keep things simple. I'm just going to build a simple command line tool to do the job. If there's a clamoring for some form of GUI, maybe, but I'm not sure. Building the GUI, ugly as it was, for CRM was painful.</p>\r\n<p>Status: Concept/Prototyping</p>\r\n<hr />\r\n<p><a href=\"http://www.hateonyourjob.com\">HateOnYourJob</a>:</p>\r\n<p>This is an application I built using Python and Django. The premise was based around an article I read, where people were tweeting stupid things on Twitter, and getting fired for it. Note to all you people out there, if your boss follows you on Twitter, don't make fun of him on Twitter. He'll probably notice, just a thought. Anyways, HOYJ was built as an anonymous place for people to hate on their job, without worrying about getting canned. The design was done by my friend Mike at <a href=\"http://www.theablefew\">The Able Few</a>. He did an amazing job on it!</p>\r\n<p>Status: Beta</p>\r\n<hr />\r\n<h4>Past Projects:</h4>\r\n<p><a href=\"../../../../article/confluence-remote-manager\">Confluence Remote Manager</a>:</p>\r\n<p>This was an application I built with Python and pyGTK to wrap up the majority of Confluence's remote API. You can manage users, content, and search your Wiki all without ever opening a browser. Makes a great troubleshooting tool for those times you break a page, and it can't render anymore. Just load the markup via XMLRPC, and undo whatever nastiness you did! Also great for bulk adding users via CSV.</p>\r\n<p>Status: Complete (enough)</p>", 
            "status": 3, 
            "title": "Projects", 
            "created": "2009-05-24 14:20:55", 
            "modified": "2009-05-24 14:20:55", 
            "buttoned": true, 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                7, 
                1, 
                6
            ], 
            "slug": "projects", 
            "tags": ""
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.article", 
        "fields": {
            "body": "<p>Remote Confluence Manager is an application I've been working on using Python and GTK (pyGTK). The goal is to wrap up the <a href=\"http://confluence.atlassian.com/display/DOC/Remote+API+Specification\">Confluence Remote API</a> with a GTK based application for Linux. This allows for the following:</p><p><strong>1. User management</strong></p><ul><li> Add Users</li><li> Remove Users</li><li> Add Groups</li><li> Remove Groups</li><li> Add users to Groups</li><li> Remove Users</li></ul><p><a href=\"/media/images/screenshot10.png\"><img class=\"size-full wp-image-179\" title=\"Adding a User\" src=\"/media/images/screenshot10.png\" alt=\"Adding a user to Confluence with Confluence GTK\" height=\"196\" width=\"226\" /></a></p><p><strong>2. Search Confluence</strong></p><p><a href=\"/media/images/screenshot8.png\"><img class=\"size-full wp-image-166\" title=\"Confluence Search\" src=\"/media/images/screenshot8.png\" alt=\"Searching Confluence with Python\" height=\"200\" width=\"229\" /></a></p><p><strong>3. Content Management</strong></p><ul><li>Add Pages</li><li>Remove Pages</li><li>Add Space</li><li>Remove Spaces</li><li>Update Pages</li><li>Create Blog Posts</li>\r\n        <li>Import Spaces</li></ul><p><a href=\"/media/images/screenshot11.png\"><img class=\"size-full wp-image-189\" title=\"screenshot11\" src=\"/media/images/screenshot11.png\" alt=\"screenshot11\" height=\"196\" width=\"233\" /></a></p><p><strong>Obtaining Confluence Remote Manager:</strong></p><p>The currently \"released\" version is 1.11, and is now available under the <a href=\"http://www.gnu.org/copyleft/gpl.html\">GPL</a>.</p><p>&#160;Download: <a href=\"/media/downloads/confluence-remote-manager.tgz\">Confluence Remote Manager</a> </p><p>Alternatively, for the latest updates, please see my <a href=\"http://github.com/f4nt/confluence-remote-manager/tree/master\">GitHub Repo</a><strong>. </strong></p><p><strong>Installation instuctions:</strong> </p><p>Download the package, and exploded the package:\r\n\r\ntar zxvf confluence-remote-manager.tgz\r\n\r\nthen to run the package: </p><p>python confluence-remote-manager.py </p><p><strong>Test Environment:</strong>\r\n\r\nPython 2.5\r\nUbuntu Intrepid x64\r\n</p>", 
            "status": 3, 
            "title": "Confluence Remote Manager", 
            "created": "2009-05-24 14:38:31", 
            "modified": "2009-05-24 14:38:31", 
            "buttoned": false, 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                1, 
                6
            ], 
            "slug": "confluence-remote-manager", 
            "tags": ""
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.article", 
        "fields": {
            "body": "<p>What you'll find below is basically the README file of django-yaba which details all the features, and what will be possible in the future. In regards to what YaBa (Yet another Blog application) actually is, the abbreviation pretty much speaks for itself. This is just another Wordpress style clone that simply tries to provide a decent blogging application without all the bloat that is Wordpress. Furthermore it aims to be even easier than Wordpress to install, setup, and get rolling with. Currently, users of CentOs 5 can grab the Django Yaba package, exploded the tarball, and run the install script. All of the dependencies, configuration, and Apache setup are taken care of for the user. All they need to provide is a MySQL database, and ReCaptcha keys in order to be up in running in less than 3 minutes with a new blog application. If you're curious what it looks like, well, you're looking at it now actually. Like what you see? In less than 10 minutes you can run the same thing. </p><p>Thanks to the YAML CSS framework, if you want to re-skin it, it's pretty easy to do so. Plans are in the works to allow for pluggable themes, but I'm just not quite there yet. Currently this is the very first release of Django-Yaba version 0.1. Hopefully there'll be many more to come in the future, and more features will pour on in. If you'd like to help out, feel free to checkout the <a href=\"http://github.com/f4nt/django-yaba/tree/master\">GitHub repo</a> and fork it. You can also drop me a line or comment as well. I could especially use assistance in the design aspects if you're so inclined. Anyways, how about that download link eh?</p><p>UPDATE: <a href=\"http://www.f4ntasmic.com/downloads/django-yaba-0.2.tgz\">Download version 0.2 of django-yaba</a>!</p><p>If you prefer you can clone it from GitHub as previously mentioned as well. You're free to do whatever you want with the code, all I ask for is a bit of credit in some fashion. Hide it in a footer, email me, or bury it in a readme. Don't really care, just as long as credit is paid. I'd also prefer that you keep it open source, and pay it forward. GPL ftw.</p><p>README file is printed below here if you're interested in features, deps, etc:</p><p>Title:<br />django_yaba, aka, django-yet-another-blog-application</p><p>Dependencies:<br />    Django-tagging<br />    Python-Feedparser<br />    Python-Twitter<br />    UrlLib and UrlLib2<br />    PIL <br />    PyMySQL<br />    setuptools<br />    cronolog<br />    mod_wsgi</p><p>Demonstration:<br />You can see the blog in action at <a href=\"../../../../../\">http://www.f4ntasmic.com</a>. That version is a bit customized to my exact needs, but it's <br />basically what you'll get when you use this applicaiton.</p><p>I know, we didn't have enough blog engines built with Django right? Hell, finding a name for this one was a PITA thanks <br />to all the others ones that exists. Hence, YABA it is. If anyone else already has this, and I just missed it, let me <br />know, and I'll change the name of this one.&#160;</p><p>Purpose:<br />I tend to blog a bit (<a href=\"../../../../../\">http://www.f4ntasmic.com</a>), and have built my own blog previously using Django. I wanted something <br />a bit more flexible though, so I decided to build it with the idea of being able to plug it anywhere with minimal <br />configuration. I'm going to leverage YAML (<a href=\"http://www.yaml.de/en/%29\">http://www.yaml.de/en/)</a> for the theme of the blog, so that you can have a <br />fairly pretty blog out of the box within minutes. Anyways, let me know if you have any questions.<br /><br />Features:</p><p>Dynamic Themes:<br /><br />There are two \"themes\" (one is just an ugly hack of the default, intended for test purposes not for actual use) now usable via the Admin UI. The default site configuration is loading from a fixture on initial syncdb, which sets up the initial themes. Obviously that means it's possible to create a theme, put it in the appropriate theme folder, and then create a theme in the Admin panel. You just have to name it the same as your directory in the themes path. Obviously, following my directory structure in the themes will lead to best results.</p><p>WYSIWG Editor:<br />   Using <a href=\"http://www.wymeditor.org/\">http://www.wymeditor.org/</a>. Thanks to <br />   <a href=\"http://jannisleidel.com/2008/11/autocomplete-widget-for-django-tagging-form-fields\">http://jannisleidel.com/2008/11/autocomplete-widget-for-django-tagging-form-fields</a>.<br />   Works</p><p>Blog Posts:<br />   Will allow previews for authenticated users eventually. Backburner.</p><p>RSS Feed:<br />   They appear to work properly now.. Doesn't work in staging, but it does work on <a href=\"../../../../../\">www.f4ntasmic.com</a> for some reason. <br />   Same code, different results. I'd try to wrap my head around it, but I fear I'd only hate myself for it.</p><p>BlogRoll:<br />   Quite functional. One would hope right? They're flipping links.</p><p>Articles:<br />    The articles are items that won't show up in the traditional main news feed. Also, if you check the \"Buttoned\" box, <br />    then the article will have a link to it on the top main nav bar. Currently functional</p><p>Comments:<br />    Currently in place and work. Also leveraging ReCAPTCHA as well to prevent spammers. </p><p>Social Media:<br />    Currently can grab your latest tweets, GitHub commits, and builds links to submit stories to Digg, Reddit, <br />    Delicious, and StumbleUpon. Github/Twitter configurable via simple settings in settings.py. If you don't want to <br />    display your tweets or github commits, just leave those fields empty in settings.py. If those are blank, you'll <br />    never see them again. </p><p>Search:<br />    You can now search for stories based on title/body contents. It's not super advanced, but it's functional.</p><p>Galleries:<br />    You can now add new photo galleries to your site. I've placed a link to the gallery list on the top nav bar for easy <br />    browsing of galleries as well. It auto creates thumbnails and links to the full size of the image as well. So far <br />    works pretty well, but isn't extensively tested at this time.</p><p>Installation Instruction:<br />    After you grab the package from GitHub or f4ntasmic.com, you can find an install directory at django-yaba/install. <br />    In there is an install script that will walk through the installation for you. This currently only works on CentOS <br />    based hosts at this time. It's also only confirmed to work in CentOS 5, your milage may vary with other hosts. The <br />    manual install works with all current Linux distributions.</p><p>Scripted install:<br />       cd django-yaba/install<br />       ./install.sh<br />       Then just follow the prompts, it'll install all dependencies for you.</p><p>Manual install, see below: <br /><br />    1. Grab the current HEAD from GitHub<br />    2. Unpack it to a directory. For example I use the following:<br />           /var/www/domains/f4ntasmic.com/www/django_yaba</p><p>You'll also want to either copy, or rsync the admin media to django_yaba/adminmedia.<br /> </p><p>3. Then you need to edit the following in settings.py in order for this to work properly:<br />           GITHUB_USERNAME - can be left blank, and that'll remove that feed from the sidebar<br />           TWITTER_USERNAME - can also be blank as above<br />           TWITTER_PASSWORD - if you want to enable auto-tweeting blog/article posts<br />           ROOT_BLOG_URL - Needed for certain items to work properly, mine is \"<a href=\"../../../../../\">http://www.f4ntasmic.com/</a>\"<br />           RECAPTCHA_PUBLIC_KEY<br />           RECAPTCHA_PRIVATE KEY - Both RECAPTCHA variables are required for comments to work since they leverage <br />           ReCaptcha for CAPTCHA</p><p>You'll also need to fill out your database information as necessary.</p><p>4. If you don't already have it, you'll need to install django-tagging's latest public release (yaba is not based on <br />    the SVN head or anything crazy). The tagging system for posts relies on that.<br />    5. Now onto the virtual host with Apache. You have two choices, mod_python (not recommended at all) or mod_wsgi. If <br />    you're using CentOS and worried about building WSGI from source, don't fret. There's an RPM in EPEL (google EPEL, <br />    you'll find the promised land). It takes 2 seconds to install, promise. So here are your options:</p><p>mod_wsgi:<br />                You'll need to add something similar to the following to your vhost:<br />                          Alias /media /home/f4nt/git-repos/personal/django_yaba/media<br />                          Alias /adminmedia /home/f4nt/git-repos/personal/django_yaba/adminmedia<br />                          WSGIScriptAlias / /home/f4nt/git-repos/personal/django_yaba/yaba.wsgi</p><p>It's up to you to some degree on working out the directory statements to make those Aliases for <br />               media/adminmedia valid.</p><p>mod_python:<br />               Now for the ugly:<br /><br /><code>&lt;Location \"/\"<br />                       SetHandler python-program<br />                       PythonPath \"['/var/www/domains/f4ntasmic.com/www/']+sys.path\"<br />                       PythonHandler django.core.handlers.modpython<br />                       SetEnv DJANGO_SETTINGS_MODULE django_yaba.settings<br />                       SetEnv PYTHON_EGG_CACHE '/var/www/domains/f4ntasmic.com/www/django_yaba/cache/'<br />                       PythonDebug On<br />                   &lt;/Location&gt;<br />&lt;LocationMatch \"/(images|media|adminmedia|downloads)\"&gt;<br />                       SetHandler none<br />                   &lt;/LocationMatch&gt;<br /><br /> </code>               </p><p>You will want to ensure that whatever is running Apache has access to django_yaba/cache no matter which way you <br />         roll it. </p>", 
            "status": 3, 
            "title": "Django Yaba Project", 
            "created": "2009-06-13 16:31:55", 
            "modified": "2009-06-13 16:31:55", 
            "buttoned": false, 
            "tweet_this": false, 
            "owner": 1, 
            "category": [
                4, 
                1, 
                6
            ], 
            "slug": "django-yaba-project", 
            "tags": "django-yaba django python first-release"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.gallery", 
        "fields": {
            "body": "<p>Testing my image gallery feature. Enjoy the pictures below from Atlassian Summit!</p>", 
            "category": [
                2
            ], 
            "created": "2009-06-13 16:12:28", 
            "title": "Pictures from San Francisco", 
            "modified": "2009-06-13 16:12:28", 
            "owner": 1, 
            "slug": "pictures-san-francisco", 
            "tags": "atlassian-summit san-francisco pictures"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.gallery", 
        "fields": {
            "body": "<p>Went to the Shedd Aquarium today in Chicago and took a bunch of pictures. Absolutely amazing time!</p>", 
            "category": [
                7
            ], 
            "created": "2009-07-26 15:02:37", 
            "title": "Trip to Shedd Aquarium", 
            "modified": "2009-07-26 15:02:37", 
            "owner": 1, 
            "slug": "trip-shedd-aquarium", 
            "tags": "chicago fishies sharks aquarium"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.gallery", 
        "fields": {
            "body": "<p>Kristie and I went to the zoo together today and had a great time! It rained a bit, but oh well, can't be sunny all the time I suppose. The zoo isn't quite as big as I remember the St. Louis Zoo being, but it still had a ton of cool animals. Thus, lots of cool pictures. Enjoy.</p>", 
            "category": [
                7
            ], 
            "created": "2009-08-01 15:47:31", 
            "title": "Lincoln Park Zoo", 
            "modified": "2009-08-01 15:47:31", 
            "owner": 1, 
            "slug": "lincoln-park-zoo", 
            "tags": "lincoln-park-zoo animals pictures chicago"
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1299.JPG", 
            "gallery": 2, 
            "title": "Aquarium"
        }
    }, 
    {
        "pk": 17, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1314_.JPG", 
            "gallery": 2, 
            "title": "Aquarium10"
        }
    }, 
    {
        "pk": 15, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1315.JPG", 
            "gallery": 2, 
            "title": "Aquarium11"
        }
    }, 
    {
        "pk": 19, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1316_.JPG", 
            "gallery": 2, 
            "title": "Aquarium12"
        }
    }, 
    {
        "pk": 20, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1317.JPG", 
            "gallery": 2, 
            "title": "Aquarium13"
        }
    }, 
    {
        "pk": 21, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1318.JPG", 
            "gallery": 2, 
            "title": "Aquarium14"
        }
    }, 
    {
        "pk": 22, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1319.JPG", 
            "gallery": 2, 
            "title": "Aquarium15"
        }
    }, 
    {
        "pk": 23, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1320.JPG", 
            "gallery": 2, 
            "title": "Aquarium16"
        }
    }, 
    {
        "pk": 24, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1321.JPG", 
            "gallery": 2, 
            "title": "Aquarium17"
        }
    }, 
    {
        "pk": 25, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1322.JPG", 
            "gallery": 2, 
            "title": "Aquarium18"
        }
    }, 
    {
        "pk": 26, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1324.JPG", 
            "gallery": 2, 
            "title": "Aquarium19"
        }
    }, 
    {
        "pk": 6, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1300.JPG", 
            "gallery": 2, 
            "title": "Aquarium2"
        }
    }, 
    {
        "pk": 27, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1325.JPG", 
            "gallery": 2, 
            "title": "Aquarium20"
        }
    }, 
    {
        "pk": 28, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1327.JPG", 
            "gallery": 2, 
            "title": "Aquarium21"
        }
    }, 
    {
        "pk": 29, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1328.JPG", 
            "gallery": 2, 
            "title": "Aquarium22"
        }
    }, 
    {
        "pk": 30, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1330.JPG", 
            "gallery": 2, 
            "title": "Aquarium23"
        }
    }, 
    {
        "pk": 31, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1331.JPG", 
            "gallery": 2, 
            "title": "Aquarium24"
        }
    }, 
    {
        "pk": 32, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1335.JPG", 
            "gallery": 2, 
            "title": "Aquarium25"
        }
    }, 
    {
        "pk": 33, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1336.JPG", 
            "gallery": 2, 
            "title": "Aquarium26"
        }
    }, 
    {
        "pk": 34, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1338.JPG", 
            "gallery": 2, 
            "title": "Aquarium27"
        }
    }, 
    {
        "pk": 35, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1339.JPG", 
            "gallery": 2, 
            "title": "Aquarium28"
        }
    }, 
    {
        "pk": 36, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1340.JPG", 
            "gallery": 2, 
            "title": "Aquarium29"
        }
    }, 
    {
        "pk": 7, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1301.JPG", 
            "gallery": 2, 
            "title": "Aquarium3"
        }
    }, 
    {
        "pk": 37, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1341.JPG", 
            "gallery": 2, 
            "title": "Aquarium30"
        }
    }, 
    {
        "pk": 38, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1342.JPG", 
            "gallery": 2, 
            "title": "Aquarium31"
        }
    }, 
    {
        "pk": 39, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1343.JPG", 
            "gallery": 2, 
            "title": "Aquarium32"
        }
    }, 
    {
        "pk": 40, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1344.JPG", 
            "gallery": 2, 
            "title": "Aquarium33"
        }
    }, 
    {
        "pk": 41, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1348.JPG", 
            "gallery": 2, 
            "title": "Aquarium34"
        }
    }, 
    {
        "pk": 42, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1350.JPG", 
            "gallery": 2, 
            "title": "Aquarium35"
        }
    }, 
    {
        "pk": 43, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1351.JPG", 
            "gallery": 2, 
            "title": "Aquarium36"
        }
    }, 
    {
        "pk": 44, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1354.JPG", 
            "gallery": 2, 
            "title": "Aquarium37"
        }
    }, 
    {
        "pk": 45, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1357.JPG", 
            "gallery": 2, 
            "title": "Aquarium38"
        }
    }, 
    {
        "pk": 46, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1358.JPG", 
            "gallery": 2, 
            "title": "Aquarium39"
        }
    }, 
    {
        "pk": 8, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1302.JPG", 
            "gallery": 2, 
            "title": "Aquarium4"
        }
    }, 
    {
        "pk": 47, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1359.JPG", 
            "gallery": 2, 
            "title": "Aquarium40"
        }
    }, 
    {
        "pk": 48, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1362.JPG", 
            "gallery": 2, 
            "title": "Aquarium41"
        }
    }, 
    {
        "pk": 49, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1363.JPG", 
            "gallery": 2, 
            "title": "Aquarium42"
        }
    }, 
    {
        "pk": 50, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1365.JPG", 
            "gallery": 2, 
            "title": "Aquarium43"
        }
    }, 
    {
        "pk": 51, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1365_.JPG", 
            "gallery": 2, 
            "title": "Aquarium44"
        }
    }, 
    {
        "pk": 52, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1366.JPG", 
            "gallery": 2, 
            "title": "Aquarium45"
        }
    }, 
    {
        "pk": 53, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1375.JPG", 
            "gallery": 2, 
            "title": "Aquarium46"
        }
    }, 
    {
        "pk": 54, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1377.JPG", 
            "gallery": 2, 
            "title": "Aquarium47"
        }
    }, 
    {
        "pk": 55, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1378.JPG", 
            "gallery": 2, 
            "title": "Aquarium48"
        }
    }, 
    {
        "pk": 56, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1380.JPG", 
            "gallery": 2, 
            "title": "Aquarium49"
        }
    }, 
    {
        "pk": 9, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1304.JPG", 
            "gallery": 2, 
            "title": "Aquarium5"
        }
    }, 
    {
        "pk": 57, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1384.JPG", 
            "gallery": 2, 
            "title": "Aquarium50"
        }
    }, 
    {
        "pk": 58, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1387.JPG", 
            "gallery": 2, 
            "title": "Aquarium51"
        }
    }, 
    {
        "pk": 59, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1390.JPG", 
            "gallery": 2, 
            "title": "Aquarium52"
        }
    }, 
    {
        "pk": 60, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1388.JPG", 
            "gallery": 2, 
            "title": "Aquarium53"
        }
    }, 
    {
        "pk": 61, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1389.JPG", 
            "gallery": 2, 
            "title": "Aquarium54"
        }
    }, 
    {
        "pk": 10, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1308.JPG", 
            "gallery": 2, 
            "title": "Aquarium6"
        }
    }, 
    {
        "pk": 11, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1310.JPG", 
            "gallery": 2, 
            "title": "Aquarium7"
        }
    }, 
    {
        "pk": 12, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1311.JPG", 
            "gallery": 2, 
            "title": "Aquarium8"
        }
    }, 
    {
        "pk": 13, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1313.JPG", 
            "gallery": 2, 
            "title": "Aquarium9"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1210.JPG", 
            "gallery": 1, 
            "title": "Contegix Booth Pt 1"
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1211.JPG", 
            "gallery": 1, 
            "title": "Contegix Booth Pt 2"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1207.JPG", 
            "gallery": 1, 
            "title": "Jim Drewes"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1218.JPG", 
            "gallery": 1, 
            "title": "Some Street"
        }
    }, 
    {
        "pk": 62, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1404.JPG", 
            "gallery": 3, 
            "title": "Zoo01"
        }
    }, 
    {
        "pk": 63, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1405.JPG", 
            "gallery": 3, 
            "title": "Zoo02"
        }
    }, 
    {
        "pk": 64, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1406.JPG", 
            "gallery": 3, 
            "title": "Zoo03"
        }
    }, 
    {
        "pk": 65, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1407.JPG", 
            "gallery": 3, 
            "title": "Zoo04"
        }
    }, 
    {
        "pk": 66, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1408.JPG", 
            "gallery": 3, 
            "title": "Zoo05"
        }
    }, 
    {
        "pk": 67, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1409.JPG", 
            "gallery": 3, 
            "title": "Zoo06"
        }
    }, 
    {
        "pk": 68, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1410.JPG", 
            "gallery": 3, 
            "title": "Zoo07"
        }
    }, 
    {
        "pk": 69, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1411.JPG", 
            "gallery": 3, 
            "title": "Zoo08"
        }
    }, 
    {
        "pk": 70, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1412.JPG", 
            "gallery": 3, 
            "title": "Zoo09"
        }
    }, 
    {
        "pk": 71, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1413.JPG", 
            "gallery": 3, 
            "title": "Zoo10"
        }
    }, 
    {
        "pk": 72, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1414.JPG", 
            "gallery": 3, 
            "title": "Zoo11"
        }
    }, 
    {
        "pk": 73, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1415.JPG", 
            "gallery": 3, 
            "title": "Zoo12"
        }
    }, 
    {
        "pk": 74, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1416.JPG", 
            "gallery": 3, 
            "title": "Zoo13"
        }
    }, 
    {
        "pk": 75, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1417.JPG", 
            "gallery": 3, 
            "title": "Zoo14"
        }
    }, 
    {
        "pk": 76, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1419.JPG", 
            "gallery": 3, 
            "title": "Zoo15"
        }
    }, 
    {
        "pk": 77, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1420.JPG", 
            "gallery": 3, 
            "title": "Zoo16"
        }
    }, 
    {
        "pk": 78, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1421.JPG", 
            "gallery": 3, 
            "title": "Zoo17"
        }
    }, 
    {
        "pk": 79, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1422.JPG", 
            "gallery": 3, 
            "title": "Zoo18"
        }
    }, 
    {
        "pk": 80, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1423.JPG", 
            "gallery": 3, 
            "title": "Zoo19"
        }
    }, 
    {
        "pk": 81, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1424.JPG", 
            "gallery": 3, 
            "title": "Zoo20"
        }
    }, 
    {
        "pk": 82, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1425.JPG", 
            "gallery": 3, 
            "title": "Zoo21"
        }
    }, 
    {
        "pk": 83, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1426.JPG", 
            "gallery": 3, 
            "title": "Zoo22"
        }
    }, 
    {
        "pk": 84, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1427.JPG", 
            "gallery": 3, 
            "title": "Zoo23"
        }
    }, 
    {
        "pk": 85, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1428.JPG", 
            "gallery": 3, 
            "title": "Zoo24"
        }
    }, 
    {
        "pk": 86, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1429.JPG", 
            "gallery": 3, 
            "title": "Zoo25"
        }
    }, 
    {
        "pk": 87, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1430.JPG", 
            "gallery": 3, 
            "title": "Zoo26"
        }
    }, 
    {
        "pk": 88, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1431.JPG", 
            "gallery": 3, 
            "title": "Zoo27"
        }
    }, 
    {
        "pk": 89, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1433.JPG", 
            "gallery": 3, 
            "title": "Zoo28"
        }
    }, 
    {
        "pk": 90, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1436.JPG", 
            "gallery": 3, 
            "title": "Zoo29"
        }
    }, 
    {
        "pk": 91, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1437.JPG", 
            "gallery": 3, 
            "title": "Zoo30"
        }
    }, 
    {
        "pk": 92, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1438.JPG", 
            "gallery": 3, 
            "title": "Zoo31"
        }
    }, 
    {
        "pk": 93, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1439.JPG", 
            "gallery": 3, 
            "title": "Zoo32"
        }
    }, 
    {
        "pk": 94, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1440.JPG", 
            "gallery": 3, 
            "title": "Zoo33"
        }
    }, 
    {
        "pk": 95, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1441.JPG", 
            "gallery": 3, 
            "title": "Zoo34"
        }
    }, 
    {
        "pk": 96, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1442.JPG", 
            "gallery": 3, 
            "title": "Zoo35"
        }
    }, 
    {
        "pk": 97, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1444.JPG", 
            "gallery": 3, 
            "title": "Zoo36"
        }
    }, 
    {
        "pk": 98, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1446.JPG", 
            "gallery": 3, 
            "title": "Zoo37"
        }
    }, 
    {
        "pk": 99, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1447.JPG", 
            "gallery": 3, 
            "title": "Zoo38"
        }
    }, 
    {
        "pk": 100, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1450.JPG", 
            "gallery": 3, 
            "title": "Zoo39"
        }
    }, 
    {
        "pk": 101, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1451.JPG", 
            "gallery": 3, 
            "title": "Zoo40"
        }
    }, 
    {
        "pk": 102, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1452.JPG", 
            "gallery": 3, 
            "title": "Zoo41"
        }
    }, 
    {
        "pk": 103, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1453.JPG", 
            "gallery": 3, 
            "title": "Zoo42"
        }
    }, 
    {
        "pk": 104, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1454.JPG", 
            "gallery": 3, 
            "title": "Zoo43"
        }
    }, 
    {
        "pk": 105, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1455.JPG", 
            "gallery": 3, 
            "title": "Zoo44"
        }
    }, 
    {
        "pk": 106, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1456.JPG", 
            "gallery": 3, 
            "title": "Zoo45"
        }
    }, 
    {
        "pk": 107, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1457.JPG", 
            "gallery": 3, 
            "title": "Zoo46"
        }
    }, 
    {
        "pk": 108, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1458.JPG", 
            "gallery": 3, 
            "title": "Zoo47"
        }
    }, 
    {
        "pk": 109, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1459.JPG", 
            "gallery": 3, 
            "title": "Zoo48"
        }
    }, 
    {
        "pk": 110, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1460.JPG", 
            "gallery": 3, 
            "title": "Zoo49"
        }
    }, 
    {
        "pk": 111, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1461.JPG", 
            "gallery": 3, 
            "title": "Zoo50"
        }
    }, 
    {
        "pk": 112, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1463.JPG", 
            "gallery": 3, 
            "title": "Zoo51"
        }
    }, 
    {
        "pk": 113, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1464.JPG", 
            "gallery": 3, 
            "title": "Zoo52"
        }
    }, 
    {
        "pk": 114, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1465.JPG", 
            "gallery": 3, 
            "title": "Zoo53"
        }
    }, 
    {
        "pk": 115, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1466.JPG", 
            "gallery": 3, 
            "title": "Zoo54"
        }
    }, 
    {
        "pk": 116, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1467.JPG", 
            "gallery": 3, 
            "title": "Zoo55"
        }
    }, 
    {
        "pk": 117, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1468.JPG", 
            "gallery": 3, 
            "title": "Zoo56"
        }
    }, 
    {
        "pk": 118, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1470.JPG", 
            "gallery": 3, 
            "title": "Zoo57"
        }
    }, 
    {
        "pk": 119, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1471.JPG", 
            "gallery": 3, 
            "title": "Zoo58"
        }
    }, 
    {
        "pk": 120, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1472.JPG", 
            "gallery": 3, 
            "title": "Zoo59"
        }
    }, 
    {
        "pk": 121, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1473.JPG", 
            "gallery": 3, 
            "title": "Zoo60"
        }
    }, 
    {
        "pk": 122, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1474.JPG", 
            "gallery": 3, 
            "title": "Zoo61"
        }
    }, 
    {
        "pk": 123, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1475.JPG", 
            "gallery": 3, 
            "title": "Zoo62"
        }
    }, 
    {
        "pk": 124, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1476.JPG", 
            "gallery": 3, 
            "title": "Zoo63"
        }
    }, 
    {
        "pk": 125, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1477.JPG", 
            "gallery": 3, 
            "title": "Zoo64"
        }
    }, 
    {
        "pk": 126, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1478.JPG", 
            "gallery": 3, 
            "title": "Zoo65"
        }
    }, 
    {
        "pk": 127, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1480.JPG", 
            "gallery": 3, 
            "title": "Zoo66"
        }
    }, 
    {
        "pk": 128, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1483.JPG", 
            "gallery": 3, 
            "title": "Zoo67"
        }
    }, 
    {
        "pk": 129, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1484.JPG", 
            "gallery": 3, 
            "title": "Zoo68"
        }
    }, 
    {
        "pk": 130, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1485.JPG", 
            "gallery": 3, 
            "title": "Zoo69"
        }
    }, 
    {
        "pk": 131, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1486.JPG", 
            "gallery": 3, 
            "title": "Zoo70"
        }
    }, 
    {
        "pk": 132, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1487.JPG", 
            "gallery": 3, 
            "title": "Zoo71"
        }
    }, 
    {
        "pk": 133, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1488.JPG", 
            "gallery": 3, 
            "title": "Zoo72"
        }
    }, 
    {
        "pk": 134, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1489.JPG", 
            "gallery": 3, 
            "title": "Zoo73"
        }
    }, 
    {
        "pk": 135, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1490.JPG", 
            "gallery": 3, 
            "title": "Zoo74"
        }
    }, 
    {
        "pk": 136, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1494.JPG", 
            "gallery": 3, 
            "title": "Zoo75"
        }
    }, 
    {
        "pk": 137, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1495.JPG", 
            "gallery": 3, 
            "title": "Zoo76"
        }
    }, 
    {
        "pk": 138, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1497.JPG", 
            "gallery": 3, 
            "title": "Zoo77"
        }
    }, 
    {
        "pk": 139, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1499.JPG", 
            "gallery": 3, 
            "title": "Zoo78"
        }
    }, 
    {
        "pk": 140, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1500.JPG", 
            "gallery": 3, 
            "title": "Zoo79"
        }
    }, 
    {
        "pk": 141, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1501.JPG", 
            "gallery": 3, 
            "title": "Zoo80"
        }
    }, 
    {
        "pk": 142, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1502.JPG", 
            "gallery": 3, 
            "title": "Zoo81"
        }
    }, 
    {
        "pk": 143, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1507.JPG", 
            "gallery": 3, 
            "title": "Zoo82"
        }
    }, 
    {
        "pk": 144, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1508.JPG", 
            "gallery": 3, 
            "title": "Zoo83"
        }
    }, 
    {
        "pk": 145, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1509.JPG", 
            "gallery": 3, 
            "title": "Zoo84"
        }
    }, 
    {
        "pk": 146, 
        "model": "blog.photo", 
        "fields": {
            "caption": "", 
            "image": "gallery/photos/100_1510.JPG", 
            "gallery": 3, 
            "title": "Zoo85"
        }
    }
]
